
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model UserPreference
 * 
 */
export type UserPreference = $Result.DefaultSelection<Prisma.$UserPreferencePayload>
/**
 * Model Location
 * 
 */
export type Location = $Result.DefaultSelection<Prisma.$LocationPayload>
/**
 * Model LocationSet
 * 
 */
export type LocationSet = $Result.DefaultSelection<Prisma.$LocationSetPayload>
/**
 * Model LocationSetMapping
 * 
 */
export type LocationSetMapping = $Result.DefaultSelection<Prisma.$LocationSetMappingPayload>
/**
 * Model LocationImage
 * 
 */
export type LocationImage = $Result.DefaultSelection<Prisma.$LocationImagePayload>
/**
 * Model GameSession
 * 
 */
export type GameSession = $Result.DefaultSelection<Prisma.$GameSessionPayload>
/**
 * Model Guess
 * 
 */
export type Guess = $Result.DefaultSelection<Prisma.$GuessPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.userPreference`: Exposes CRUD operations for the **UserPreference** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserPreferences
    * const userPreferences = await prisma.userPreference.findMany()
    * ```
    */
  get userPreference(): Prisma.UserPreferenceDelegate<ExtArgs>;

  /**
   * `prisma.location`: Exposes CRUD operations for the **Location** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Locations
    * const locations = await prisma.location.findMany()
    * ```
    */
  get location(): Prisma.LocationDelegate<ExtArgs>;

  /**
   * `prisma.locationSet`: Exposes CRUD operations for the **LocationSet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LocationSets
    * const locationSets = await prisma.locationSet.findMany()
    * ```
    */
  get locationSet(): Prisma.LocationSetDelegate<ExtArgs>;

  /**
   * `prisma.locationSetMapping`: Exposes CRUD operations for the **LocationSetMapping** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LocationSetMappings
    * const locationSetMappings = await prisma.locationSetMapping.findMany()
    * ```
    */
  get locationSetMapping(): Prisma.LocationSetMappingDelegate<ExtArgs>;

  /**
   * `prisma.locationImage`: Exposes CRUD operations for the **LocationImage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LocationImages
    * const locationImages = await prisma.locationImage.findMany()
    * ```
    */
  get locationImage(): Prisma.LocationImageDelegate<ExtArgs>;

  /**
   * `prisma.gameSession`: Exposes CRUD operations for the **GameSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GameSessions
    * const gameSessions = await prisma.gameSession.findMany()
    * ```
    */
  get gameSession(): Prisma.GameSessionDelegate<ExtArgs>;

  /**
   * `prisma.guess`: Exposes CRUD operations for the **Guess** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Guesses
    * const guesses = await prisma.guess.findMany()
    * ```
    */
  get guess(): Prisma.GuessDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    UserPreference: 'UserPreference',
    Location: 'Location',
    LocationSet: 'LocationSet',
    LocationSetMapping: 'LocationSetMapping',
    LocationImage: 'LocationImage',
    GameSession: 'GameSession',
    Guess: 'Guess'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "userPreference" | "location" | "locationSet" | "locationSetMapping" | "locationImage" | "gameSession" | "guess"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      UserPreference: {
        payload: Prisma.$UserPreferencePayload<ExtArgs>
        fields: Prisma.UserPreferenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserPreferenceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserPreferenceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencePayload>
          }
          findFirst: {
            args: Prisma.UserPreferenceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserPreferenceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencePayload>
          }
          findMany: {
            args: Prisma.UserPreferenceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencePayload>[]
          }
          create: {
            args: Prisma.UserPreferenceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencePayload>
          }
          createMany: {
            args: Prisma.UserPreferenceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserPreferenceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencePayload>[]
          }
          delete: {
            args: Prisma.UserPreferenceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencePayload>
          }
          update: {
            args: Prisma.UserPreferenceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencePayload>
          }
          deleteMany: {
            args: Prisma.UserPreferenceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserPreferenceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserPreferenceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencePayload>
          }
          aggregate: {
            args: Prisma.UserPreferenceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserPreference>
          }
          groupBy: {
            args: Prisma.UserPreferenceGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserPreferenceGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserPreferenceCountArgs<ExtArgs>
            result: $Utils.Optional<UserPreferenceCountAggregateOutputType> | number
          }
        }
      }
      Location: {
        payload: Prisma.$LocationPayload<ExtArgs>
        fields: Prisma.LocationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LocationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LocationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          findFirst: {
            args: Prisma.LocationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LocationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          findMany: {
            args: Prisma.LocationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>[]
          }
          create: {
            args: Prisma.LocationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          createMany: {
            args: Prisma.LocationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LocationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>[]
          }
          delete: {
            args: Prisma.LocationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          update: {
            args: Prisma.LocationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          deleteMany: {
            args: Prisma.LocationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LocationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LocationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          aggregate: {
            args: Prisma.LocationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLocation>
          }
          groupBy: {
            args: Prisma.LocationGroupByArgs<ExtArgs>
            result: $Utils.Optional<LocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.LocationCountArgs<ExtArgs>
            result: $Utils.Optional<LocationCountAggregateOutputType> | number
          }
        }
      }
      LocationSet: {
        payload: Prisma.$LocationSetPayload<ExtArgs>
        fields: Prisma.LocationSetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LocationSetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationSetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LocationSetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationSetPayload>
          }
          findFirst: {
            args: Prisma.LocationSetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationSetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LocationSetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationSetPayload>
          }
          findMany: {
            args: Prisma.LocationSetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationSetPayload>[]
          }
          create: {
            args: Prisma.LocationSetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationSetPayload>
          }
          createMany: {
            args: Prisma.LocationSetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LocationSetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationSetPayload>[]
          }
          delete: {
            args: Prisma.LocationSetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationSetPayload>
          }
          update: {
            args: Prisma.LocationSetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationSetPayload>
          }
          deleteMany: {
            args: Prisma.LocationSetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LocationSetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LocationSetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationSetPayload>
          }
          aggregate: {
            args: Prisma.LocationSetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLocationSet>
          }
          groupBy: {
            args: Prisma.LocationSetGroupByArgs<ExtArgs>
            result: $Utils.Optional<LocationSetGroupByOutputType>[]
          }
          count: {
            args: Prisma.LocationSetCountArgs<ExtArgs>
            result: $Utils.Optional<LocationSetCountAggregateOutputType> | number
          }
        }
      }
      LocationSetMapping: {
        payload: Prisma.$LocationSetMappingPayload<ExtArgs>
        fields: Prisma.LocationSetMappingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LocationSetMappingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationSetMappingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LocationSetMappingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationSetMappingPayload>
          }
          findFirst: {
            args: Prisma.LocationSetMappingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationSetMappingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LocationSetMappingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationSetMappingPayload>
          }
          findMany: {
            args: Prisma.LocationSetMappingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationSetMappingPayload>[]
          }
          create: {
            args: Prisma.LocationSetMappingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationSetMappingPayload>
          }
          createMany: {
            args: Prisma.LocationSetMappingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LocationSetMappingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationSetMappingPayload>[]
          }
          delete: {
            args: Prisma.LocationSetMappingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationSetMappingPayload>
          }
          update: {
            args: Prisma.LocationSetMappingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationSetMappingPayload>
          }
          deleteMany: {
            args: Prisma.LocationSetMappingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LocationSetMappingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LocationSetMappingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationSetMappingPayload>
          }
          aggregate: {
            args: Prisma.LocationSetMappingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLocationSetMapping>
          }
          groupBy: {
            args: Prisma.LocationSetMappingGroupByArgs<ExtArgs>
            result: $Utils.Optional<LocationSetMappingGroupByOutputType>[]
          }
          count: {
            args: Prisma.LocationSetMappingCountArgs<ExtArgs>
            result: $Utils.Optional<LocationSetMappingCountAggregateOutputType> | number
          }
        }
      }
      LocationImage: {
        payload: Prisma.$LocationImagePayload<ExtArgs>
        fields: Prisma.LocationImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LocationImageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LocationImageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationImagePayload>
          }
          findFirst: {
            args: Prisma.LocationImageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LocationImageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationImagePayload>
          }
          findMany: {
            args: Prisma.LocationImageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationImagePayload>[]
          }
          create: {
            args: Prisma.LocationImageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationImagePayload>
          }
          createMany: {
            args: Prisma.LocationImageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LocationImageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationImagePayload>[]
          }
          delete: {
            args: Prisma.LocationImageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationImagePayload>
          }
          update: {
            args: Prisma.LocationImageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationImagePayload>
          }
          deleteMany: {
            args: Prisma.LocationImageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LocationImageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LocationImageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationImagePayload>
          }
          aggregate: {
            args: Prisma.LocationImageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLocationImage>
          }
          groupBy: {
            args: Prisma.LocationImageGroupByArgs<ExtArgs>
            result: $Utils.Optional<LocationImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.LocationImageCountArgs<ExtArgs>
            result: $Utils.Optional<LocationImageCountAggregateOutputType> | number
          }
        }
      }
      GameSession: {
        payload: Prisma.$GameSessionPayload<ExtArgs>
        fields: Prisma.GameSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSessionPayload>
          }
          findFirst: {
            args: Prisma.GameSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSessionPayload>
          }
          findMany: {
            args: Prisma.GameSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSessionPayload>[]
          }
          create: {
            args: Prisma.GameSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSessionPayload>
          }
          createMany: {
            args: Prisma.GameSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GameSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSessionPayload>[]
          }
          delete: {
            args: Prisma.GameSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSessionPayload>
          }
          update: {
            args: Prisma.GameSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSessionPayload>
          }
          deleteMany: {
            args: Prisma.GameSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GameSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GameSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameSessionPayload>
          }
          aggregate: {
            args: Prisma.GameSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGameSession>
          }
          groupBy: {
            args: Prisma.GameSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameSessionCountArgs<ExtArgs>
            result: $Utils.Optional<GameSessionCountAggregateOutputType> | number
          }
        }
      }
      Guess: {
        payload: Prisma.$GuessPayload<ExtArgs>
        fields: Prisma.GuessFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GuessFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuessPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GuessFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuessPayload>
          }
          findFirst: {
            args: Prisma.GuessFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuessPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GuessFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuessPayload>
          }
          findMany: {
            args: Prisma.GuessFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuessPayload>[]
          }
          create: {
            args: Prisma.GuessCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuessPayload>
          }
          createMany: {
            args: Prisma.GuessCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GuessCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuessPayload>[]
          }
          delete: {
            args: Prisma.GuessDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuessPayload>
          }
          update: {
            args: Prisma.GuessUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuessPayload>
          }
          deleteMany: {
            args: Prisma.GuessDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GuessUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GuessUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuessPayload>
          }
          aggregate: {
            args: Prisma.GuessAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGuess>
          }
          groupBy: {
            args: Prisma.GuessGroupByArgs<ExtArgs>
            result: $Utils.Optional<GuessGroupByOutputType>[]
          }
          count: {
            args: Prisma.GuessCountArgs<ExtArgs>
            result: $Utils.Optional<GuessCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    gameSessions: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gameSessions?: boolean | UserCountOutputTypeCountGameSessionsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGameSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameSessionWhereInput
  }


  /**
   * Count Type LocationCountOutputType
   */

  export type LocationCountOutputType = {
    guesses: number
    images: number
    sets: number
  }

  export type LocationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    guesses?: boolean | LocationCountOutputTypeCountGuessesArgs
    images?: boolean | LocationCountOutputTypeCountImagesArgs
    sets?: boolean | LocationCountOutputTypeCountSetsArgs
  }

  // Custom InputTypes
  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationCountOutputType
     */
    select?: LocationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountGuessesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GuessWhereInput
  }

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationImageWhereInput
  }

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountSetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationSetMappingWhereInput
  }


  /**
   * Count Type LocationSetCountOutputType
   */

  export type LocationSetCountOutputType = {
    gameSessions: number
    locations: number
  }

  export type LocationSetCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gameSessions?: boolean | LocationSetCountOutputTypeCountGameSessionsArgs
    locations?: boolean | LocationSetCountOutputTypeCountLocationsArgs
  }

  // Custom InputTypes
  /**
   * LocationSetCountOutputType without action
   */
  export type LocationSetCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationSetCountOutputType
     */
    select?: LocationSetCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LocationSetCountOutputType without action
   */
  export type LocationSetCountOutputTypeCountGameSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameSessionWhereInput
  }

  /**
   * LocationSetCountOutputType without action
   */
  export type LocationSetCountOutputTypeCountLocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationSetMappingWhereInput
  }


  /**
   * Count Type GameSessionCountOutputType
   */

  export type GameSessionCountOutputType = {
    guesses: number
  }

  export type GameSessionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    guesses?: boolean | GameSessionCountOutputTypeCountGuessesArgs
  }

  // Custom InputTypes
  /**
   * GameSessionCountOutputType without action
   */
  export type GameSessionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSessionCountOutputType
     */
    select?: GameSessionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GameSessionCountOutputType without action
   */
  export type GameSessionCountOutputTypeCountGuessesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GuessWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    passwordHash: string | null
    displayName: string | null
    createdAt: Date | null
    updatedAt: Date | null
    lastLogin: Date | null
    isVerified: boolean | null
    role: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    passwordHash: string | null
    displayName: string | null
    createdAt: Date | null
    updatedAt: Date | null
    lastLogin: Date | null
    isVerified: boolean | null
    role: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    passwordHash: number
    displayName: number
    createdAt: number
    updatedAt: number
    lastLogin: number
    isVerified: number
    role: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    displayName?: true
    createdAt?: true
    updatedAt?: true
    lastLogin?: true
    isVerified?: true
    role?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    displayName?: true
    createdAt?: true
    updatedAt?: true
    lastLogin?: true
    isVerified?: true
    role?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    displayName?: true
    createdAt?: true
    updatedAt?: true
    lastLogin?: true
    isVerified?: true
    role?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    passwordHash: string
    displayName: string | null
    createdAt: Date
    updatedAt: Date
    lastLogin: Date | null
    isVerified: boolean
    role: string
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    displayName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLogin?: boolean
    isVerified?: boolean
    role?: boolean
    gameSessions?: boolean | User$gameSessionsArgs<ExtArgs>
    preferences?: boolean | User$preferencesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    displayName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLogin?: boolean
    isVerified?: boolean
    role?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    displayName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLogin?: boolean
    isVerified?: boolean
    role?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gameSessions?: boolean | User$gameSessionsArgs<ExtArgs>
    preferences?: boolean | User$preferencesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      gameSessions: Prisma.$GameSessionPayload<ExtArgs>[]
      preferences: Prisma.$UserPreferencePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      passwordHash: string
      displayName: string | null
      createdAt: Date
      updatedAt: Date
      lastLogin: Date | null
      isVerified: boolean
      role: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    gameSessions<T extends User$gameSessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$gameSessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "findMany"> | Null>
    preferences<T extends User$preferencesArgs<ExtArgs> = {}>(args?: Subset<T, User$preferencesArgs<ExtArgs>>): Prisma__UserPreferenceClient<$Result.GetResult<Prisma.$UserPreferencePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly displayName: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly lastLogin: FieldRef<"User", 'DateTime'>
    readonly isVerified: FieldRef<"User", 'Boolean'>
    readonly role: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.gameSessions
   */
  export type User$gameSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
    where?: GameSessionWhereInput
    orderBy?: GameSessionOrderByWithRelationInput | GameSessionOrderByWithRelationInput[]
    cursor?: GameSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameSessionScalarFieldEnum | GameSessionScalarFieldEnum[]
  }

  /**
   * User.preferences
   */
  export type User$preferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceInclude<ExtArgs> | null
    where?: UserPreferenceWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model UserPreference
   */

  export type AggregateUserPreference = {
    _count: UserPreferenceCountAggregateOutputType | null
    _min: UserPreferenceMinAggregateOutputType | null
    _max: UserPreferenceMaxAggregateOutputType | null
  }

  export type UserPreferenceMinAggregateOutputType = {
    id: string | null
    userId: string | null
    difficulty: string | null
    theme: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserPreferenceMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    difficulty: string | null
    theme: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserPreferenceCountAggregateOutputType = {
    id: number
    userId: number
    difficulty: number
    theme: number
    notificationSettings: number
    uiPreferences: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserPreferenceMinAggregateInputType = {
    id?: true
    userId?: true
    difficulty?: true
    theme?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserPreferenceMaxAggregateInputType = {
    id?: true
    userId?: true
    difficulty?: true
    theme?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserPreferenceCountAggregateInputType = {
    id?: true
    userId?: true
    difficulty?: true
    theme?: true
    notificationSettings?: true
    uiPreferences?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserPreferenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPreference to aggregate.
     */
    where?: UserPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPreferences to fetch.
     */
    orderBy?: UserPreferenceOrderByWithRelationInput | UserPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserPreferences
    **/
    _count?: true | UserPreferenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserPreferenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserPreferenceMaxAggregateInputType
  }

  export type GetUserPreferenceAggregateType<T extends UserPreferenceAggregateArgs> = {
        [P in keyof T & keyof AggregateUserPreference]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserPreference[P]>
      : GetScalarType<T[P], AggregateUserPreference[P]>
  }




  export type UserPreferenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPreferenceWhereInput
    orderBy?: UserPreferenceOrderByWithAggregationInput | UserPreferenceOrderByWithAggregationInput[]
    by: UserPreferenceScalarFieldEnum[] | UserPreferenceScalarFieldEnum
    having?: UserPreferenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserPreferenceCountAggregateInputType | true
    _min?: UserPreferenceMinAggregateInputType
    _max?: UserPreferenceMaxAggregateInputType
  }

  export type UserPreferenceGroupByOutputType = {
    id: string
    userId: string
    difficulty: string | null
    theme: string | null
    notificationSettings: JsonValue | null
    uiPreferences: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: UserPreferenceCountAggregateOutputType | null
    _min: UserPreferenceMinAggregateOutputType | null
    _max: UserPreferenceMaxAggregateOutputType | null
  }

  type GetUserPreferenceGroupByPayload<T extends UserPreferenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserPreferenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserPreferenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserPreferenceGroupByOutputType[P]>
            : GetScalarType<T[P], UserPreferenceGroupByOutputType[P]>
        }
      >
    >


  export type UserPreferenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    difficulty?: boolean
    theme?: boolean
    notificationSettings?: boolean
    uiPreferences?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPreference"]>

  export type UserPreferenceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    difficulty?: boolean
    theme?: boolean
    notificationSettings?: boolean
    uiPreferences?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPreference"]>

  export type UserPreferenceSelectScalar = {
    id?: boolean
    userId?: boolean
    difficulty?: boolean
    theme?: boolean
    notificationSettings?: boolean
    uiPreferences?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserPreferenceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserPreferenceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserPreferencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserPreference"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      difficulty: string | null
      theme: string | null
      notificationSettings: Prisma.JsonValue | null
      uiPreferences: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userPreference"]>
    composites: {}
  }

  type UserPreferenceGetPayload<S extends boolean | null | undefined | UserPreferenceDefaultArgs> = $Result.GetResult<Prisma.$UserPreferencePayload, S>

  type UserPreferenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserPreferenceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserPreferenceCountAggregateInputType | true
    }

  export interface UserPreferenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserPreference'], meta: { name: 'UserPreference' } }
    /**
     * Find zero or one UserPreference that matches the filter.
     * @param {UserPreferenceFindUniqueArgs} args - Arguments to find a UserPreference
     * @example
     * // Get one UserPreference
     * const userPreference = await prisma.userPreference.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserPreferenceFindUniqueArgs>(args: SelectSubset<T, UserPreferenceFindUniqueArgs<ExtArgs>>): Prisma__UserPreferenceClient<$Result.GetResult<Prisma.$UserPreferencePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserPreference that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserPreferenceFindUniqueOrThrowArgs} args - Arguments to find a UserPreference
     * @example
     * // Get one UserPreference
     * const userPreference = await prisma.userPreference.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserPreferenceFindUniqueOrThrowArgs>(args: SelectSubset<T, UserPreferenceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserPreferenceClient<$Result.GetResult<Prisma.$UserPreferencePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserPreference that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferenceFindFirstArgs} args - Arguments to find a UserPreference
     * @example
     * // Get one UserPreference
     * const userPreference = await prisma.userPreference.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserPreferenceFindFirstArgs>(args?: SelectSubset<T, UserPreferenceFindFirstArgs<ExtArgs>>): Prisma__UserPreferenceClient<$Result.GetResult<Prisma.$UserPreferencePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserPreference that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferenceFindFirstOrThrowArgs} args - Arguments to find a UserPreference
     * @example
     * // Get one UserPreference
     * const userPreference = await prisma.userPreference.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserPreferenceFindFirstOrThrowArgs>(args?: SelectSubset<T, UserPreferenceFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserPreferenceClient<$Result.GetResult<Prisma.$UserPreferencePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserPreferences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferenceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserPreferences
     * const userPreferences = await prisma.userPreference.findMany()
     * 
     * // Get first 10 UserPreferences
     * const userPreferences = await prisma.userPreference.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userPreferenceWithIdOnly = await prisma.userPreference.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserPreferenceFindManyArgs>(args?: SelectSubset<T, UserPreferenceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPreferencePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserPreference.
     * @param {UserPreferenceCreateArgs} args - Arguments to create a UserPreference.
     * @example
     * // Create one UserPreference
     * const UserPreference = await prisma.userPreference.create({
     *   data: {
     *     // ... data to create a UserPreference
     *   }
     * })
     * 
     */
    create<T extends UserPreferenceCreateArgs>(args: SelectSubset<T, UserPreferenceCreateArgs<ExtArgs>>): Prisma__UserPreferenceClient<$Result.GetResult<Prisma.$UserPreferencePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserPreferences.
     * @param {UserPreferenceCreateManyArgs} args - Arguments to create many UserPreferences.
     * @example
     * // Create many UserPreferences
     * const userPreference = await prisma.userPreference.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserPreferenceCreateManyArgs>(args?: SelectSubset<T, UserPreferenceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserPreferences and returns the data saved in the database.
     * @param {UserPreferenceCreateManyAndReturnArgs} args - Arguments to create many UserPreferences.
     * @example
     * // Create many UserPreferences
     * const userPreference = await prisma.userPreference.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserPreferences and only return the `id`
     * const userPreferenceWithIdOnly = await prisma.userPreference.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserPreferenceCreateManyAndReturnArgs>(args?: SelectSubset<T, UserPreferenceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPreferencePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserPreference.
     * @param {UserPreferenceDeleteArgs} args - Arguments to delete one UserPreference.
     * @example
     * // Delete one UserPreference
     * const UserPreference = await prisma.userPreference.delete({
     *   where: {
     *     // ... filter to delete one UserPreference
     *   }
     * })
     * 
     */
    delete<T extends UserPreferenceDeleteArgs>(args: SelectSubset<T, UserPreferenceDeleteArgs<ExtArgs>>): Prisma__UserPreferenceClient<$Result.GetResult<Prisma.$UserPreferencePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserPreference.
     * @param {UserPreferenceUpdateArgs} args - Arguments to update one UserPreference.
     * @example
     * // Update one UserPreference
     * const userPreference = await prisma.userPreference.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserPreferenceUpdateArgs>(args: SelectSubset<T, UserPreferenceUpdateArgs<ExtArgs>>): Prisma__UserPreferenceClient<$Result.GetResult<Prisma.$UserPreferencePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserPreferences.
     * @param {UserPreferenceDeleteManyArgs} args - Arguments to filter UserPreferences to delete.
     * @example
     * // Delete a few UserPreferences
     * const { count } = await prisma.userPreference.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserPreferenceDeleteManyArgs>(args?: SelectSubset<T, UserPreferenceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserPreferences
     * const userPreference = await prisma.userPreference.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserPreferenceUpdateManyArgs>(args: SelectSubset<T, UserPreferenceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserPreference.
     * @param {UserPreferenceUpsertArgs} args - Arguments to update or create a UserPreference.
     * @example
     * // Update or create a UserPreference
     * const userPreference = await prisma.userPreference.upsert({
     *   create: {
     *     // ... data to create a UserPreference
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserPreference we want to update
     *   }
     * })
     */
    upsert<T extends UserPreferenceUpsertArgs>(args: SelectSubset<T, UserPreferenceUpsertArgs<ExtArgs>>): Prisma__UserPreferenceClient<$Result.GetResult<Prisma.$UserPreferencePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferenceCountArgs} args - Arguments to filter UserPreferences to count.
     * @example
     * // Count the number of UserPreferences
     * const count = await prisma.userPreference.count({
     *   where: {
     *     // ... the filter for the UserPreferences we want to count
     *   }
     * })
    **/
    count<T extends UserPreferenceCountArgs>(
      args?: Subset<T, UserPreferenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserPreferenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserPreference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserPreferenceAggregateArgs>(args: Subset<T, UserPreferenceAggregateArgs>): Prisma.PrismaPromise<GetUserPreferenceAggregateType<T>>

    /**
     * Group by UserPreference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserPreferenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserPreferenceGroupByArgs['orderBy'] }
        : { orderBy?: UserPreferenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserPreferenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserPreferenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserPreference model
   */
  readonly fields: UserPreferenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserPreference.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserPreferenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserPreference model
   */ 
  interface UserPreferenceFieldRefs {
    readonly id: FieldRef<"UserPreference", 'String'>
    readonly userId: FieldRef<"UserPreference", 'String'>
    readonly difficulty: FieldRef<"UserPreference", 'String'>
    readonly theme: FieldRef<"UserPreference", 'String'>
    readonly notificationSettings: FieldRef<"UserPreference", 'Json'>
    readonly uiPreferences: FieldRef<"UserPreference", 'Json'>
    readonly createdAt: FieldRef<"UserPreference", 'DateTime'>
    readonly updatedAt: FieldRef<"UserPreference", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserPreference findUnique
   */
  export type UserPreferenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which UserPreference to fetch.
     */
    where: UserPreferenceWhereUniqueInput
  }

  /**
   * UserPreference findUniqueOrThrow
   */
  export type UserPreferenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which UserPreference to fetch.
     */
    where: UserPreferenceWhereUniqueInput
  }

  /**
   * UserPreference findFirst
   */
  export type UserPreferenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which UserPreference to fetch.
     */
    where?: UserPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPreferences to fetch.
     */
    orderBy?: UserPreferenceOrderByWithRelationInput | UserPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPreferences.
     */
    cursor?: UserPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPreferences.
     */
    distinct?: UserPreferenceScalarFieldEnum | UserPreferenceScalarFieldEnum[]
  }

  /**
   * UserPreference findFirstOrThrow
   */
  export type UserPreferenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which UserPreference to fetch.
     */
    where?: UserPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPreferences to fetch.
     */
    orderBy?: UserPreferenceOrderByWithRelationInput | UserPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPreferences.
     */
    cursor?: UserPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPreferences.
     */
    distinct?: UserPreferenceScalarFieldEnum | UserPreferenceScalarFieldEnum[]
  }

  /**
   * UserPreference findMany
   */
  export type UserPreferenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which UserPreferences to fetch.
     */
    where?: UserPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPreferences to fetch.
     */
    orderBy?: UserPreferenceOrderByWithRelationInput | UserPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserPreferences.
     */
    cursor?: UserPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPreferences.
     */
    skip?: number
    distinct?: UserPreferenceScalarFieldEnum | UserPreferenceScalarFieldEnum[]
  }

  /**
   * UserPreference create
   */
  export type UserPreferenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceInclude<ExtArgs> | null
    /**
     * The data needed to create a UserPreference.
     */
    data: XOR<UserPreferenceCreateInput, UserPreferenceUncheckedCreateInput>
  }

  /**
   * UserPreference createMany
   */
  export type UserPreferenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserPreferences.
     */
    data: UserPreferenceCreateManyInput | UserPreferenceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserPreference createManyAndReturn
   */
  export type UserPreferenceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserPreferences.
     */
    data: UserPreferenceCreateManyInput | UserPreferenceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserPreference update
   */
  export type UserPreferenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceInclude<ExtArgs> | null
    /**
     * The data needed to update a UserPreference.
     */
    data: XOR<UserPreferenceUpdateInput, UserPreferenceUncheckedUpdateInput>
    /**
     * Choose, which UserPreference to update.
     */
    where: UserPreferenceWhereUniqueInput
  }

  /**
   * UserPreference updateMany
   */
  export type UserPreferenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserPreferences.
     */
    data: XOR<UserPreferenceUpdateManyMutationInput, UserPreferenceUncheckedUpdateManyInput>
    /**
     * Filter which UserPreferences to update
     */
    where?: UserPreferenceWhereInput
  }

  /**
   * UserPreference upsert
   */
  export type UserPreferenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceInclude<ExtArgs> | null
    /**
     * The filter to search for the UserPreference to update in case it exists.
     */
    where: UserPreferenceWhereUniqueInput
    /**
     * In case the UserPreference found by the `where` argument doesn't exist, create a new UserPreference with this data.
     */
    create: XOR<UserPreferenceCreateInput, UserPreferenceUncheckedCreateInput>
    /**
     * In case the UserPreference was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserPreferenceUpdateInput, UserPreferenceUncheckedUpdateInput>
  }

  /**
   * UserPreference delete
   */
  export type UserPreferenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceInclude<ExtArgs> | null
    /**
     * Filter which UserPreference to delete.
     */
    where: UserPreferenceWhereUniqueInput
  }

  /**
   * UserPreference deleteMany
   */
  export type UserPreferenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPreferences to delete
     */
    where?: UserPreferenceWhereInput
  }

  /**
   * UserPreference without action
   */
  export type UserPreferenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreference
     */
    select?: UserPreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferenceInclude<ExtArgs> | null
  }


  /**
   * Model Location
   */

  export type AggregateLocation = {
    _count: LocationCountAggregateOutputType | null
    _avg: LocationAvgAggregateOutputType | null
    _sum: LocationSumAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  export type LocationAvgAggregateOutputType = {
    latitude: Decimal | null
    longitude: Decimal | null
    difficulty: number | null
  }

  export type LocationSumAggregateOutputType = {
    latitude: Decimal | null
    longitude: Decimal | null
    difficulty: number | null
  }

  export type LocationMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    latitude: Decimal | null
    longitude: Decimal | null
    difficulty: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LocationMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    latitude: Decimal | null
    longitude: Decimal | null
    difficulty: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LocationCountAggregateOutputType = {
    id: number
    name: number
    description: number
    latitude: number
    longitude: number
    difficulty: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LocationAvgAggregateInputType = {
    latitude?: true
    longitude?: true
    difficulty?: true
  }

  export type LocationSumAggregateInputType = {
    latitude?: true
    longitude?: true
    difficulty?: true
  }

  export type LocationMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    latitude?: true
    longitude?: true
    difficulty?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LocationMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    latitude?: true
    longitude?: true
    difficulty?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LocationCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    latitude?: true
    longitude?: true
    difficulty?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Location to aggregate.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Locations
    **/
    _count?: true | LocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LocationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LocationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LocationMaxAggregateInputType
  }

  export type GetLocationAggregateType<T extends LocationAggregateArgs> = {
        [P in keyof T & keyof AggregateLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLocation[P]>
      : GetScalarType<T[P], AggregateLocation[P]>
  }




  export type LocationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationWhereInput
    orderBy?: LocationOrderByWithAggregationInput | LocationOrderByWithAggregationInput[]
    by: LocationScalarFieldEnum[] | LocationScalarFieldEnum
    having?: LocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LocationCountAggregateInputType | true
    _avg?: LocationAvgAggregateInputType
    _sum?: LocationSumAggregateInputType
    _min?: LocationMinAggregateInputType
    _max?: LocationMaxAggregateInputType
  }

  export type LocationGroupByOutputType = {
    id: string
    name: string
    description: string | null
    latitude: Decimal
    longitude: Decimal
    difficulty: number | null
    createdAt: Date
    updatedAt: Date
    _count: LocationCountAggregateOutputType | null
    _avg: LocationAvgAggregateOutputType | null
    _sum: LocationSumAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  type GetLocationGroupByPayload<T extends LocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LocationGroupByOutputType[P]>
            : GetScalarType<T[P], LocationGroupByOutputType[P]>
        }
      >
    >


  export type LocationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    latitude?: boolean
    longitude?: boolean
    difficulty?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    guesses?: boolean | Location$guessesArgs<ExtArgs>
    images?: boolean | Location$imagesArgs<ExtArgs>
    sets?: boolean | Location$setsArgs<ExtArgs>
    _count?: boolean | LocationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["location"]>

  export type LocationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    latitude?: boolean
    longitude?: boolean
    difficulty?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["location"]>

  export type LocationSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    latitude?: boolean
    longitude?: boolean
    difficulty?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type LocationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    guesses?: boolean | Location$guessesArgs<ExtArgs>
    images?: boolean | Location$imagesArgs<ExtArgs>
    sets?: boolean | Location$setsArgs<ExtArgs>
    _count?: boolean | LocationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LocationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $LocationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Location"
    objects: {
      guesses: Prisma.$GuessPayload<ExtArgs>[]
      images: Prisma.$LocationImagePayload<ExtArgs>[]
      sets: Prisma.$LocationSetMappingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      latitude: Prisma.Decimal
      longitude: Prisma.Decimal
      difficulty: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["location"]>
    composites: {}
  }

  type LocationGetPayload<S extends boolean | null | undefined | LocationDefaultArgs> = $Result.GetResult<Prisma.$LocationPayload, S>

  type LocationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LocationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LocationCountAggregateInputType | true
    }

  export interface LocationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Location'], meta: { name: 'Location' } }
    /**
     * Find zero or one Location that matches the filter.
     * @param {LocationFindUniqueArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LocationFindUniqueArgs>(args: SelectSubset<T, LocationFindUniqueArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Location that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LocationFindUniqueOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LocationFindUniqueOrThrowArgs>(args: SelectSubset<T, LocationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Location that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindFirstArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LocationFindFirstArgs>(args?: SelectSubset<T, LocationFindFirstArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Location that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindFirstOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LocationFindFirstOrThrowArgs>(args?: SelectSubset<T, LocationFindFirstOrThrowArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Locations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Locations
     * const locations = await prisma.location.findMany()
     * 
     * // Get first 10 Locations
     * const locations = await prisma.location.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const locationWithIdOnly = await prisma.location.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LocationFindManyArgs>(args?: SelectSubset<T, LocationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Location.
     * @param {LocationCreateArgs} args - Arguments to create a Location.
     * @example
     * // Create one Location
     * const Location = await prisma.location.create({
     *   data: {
     *     // ... data to create a Location
     *   }
     * })
     * 
     */
    create<T extends LocationCreateArgs>(args: SelectSubset<T, LocationCreateArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Locations.
     * @param {LocationCreateManyArgs} args - Arguments to create many Locations.
     * @example
     * // Create many Locations
     * const location = await prisma.location.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LocationCreateManyArgs>(args?: SelectSubset<T, LocationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Locations and returns the data saved in the database.
     * @param {LocationCreateManyAndReturnArgs} args - Arguments to create many Locations.
     * @example
     * // Create many Locations
     * const location = await prisma.location.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Locations and only return the `id`
     * const locationWithIdOnly = await prisma.location.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LocationCreateManyAndReturnArgs>(args?: SelectSubset<T, LocationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Location.
     * @param {LocationDeleteArgs} args - Arguments to delete one Location.
     * @example
     * // Delete one Location
     * const Location = await prisma.location.delete({
     *   where: {
     *     // ... filter to delete one Location
     *   }
     * })
     * 
     */
    delete<T extends LocationDeleteArgs>(args: SelectSubset<T, LocationDeleteArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Location.
     * @param {LocationUpdateArgs} args - Arguments to update one Location.
     * @example
     * // Update one Location
     * const location = await prisma.location.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LocationUpdateArgs>(args: SelectSubset<T, LocationUpdateArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Locations.
     * @param {LocationDeleteManyArgs} args - Arguments to filter Locations to delete.
     * @example
     * // Delete a few Locations
     * const { count } = await prisma.location.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LocationDeleteManyArgs>(args?: SelectSubset<T, LocationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Locations
     * const location = await prisma.location.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LocationUpdateManyArgs>(args: SelectSubset<T, LocationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Location.
     * @param {LocationUpsertArgs} args - Arguments to update or create a Location.
     * @example
     * // Update or create a Location
     * const location = await prisma.location.upsert({
     *   create: {
     *     // ... data to create a Location
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Location we want to update
     *   }
     * })
     */
    upsert<T extends LocationUpsertArgs>(args: SelectSubset<T, LocationUpsertArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationCountArgs} args - Arguments to filter Locations to count.
     * @example
     * // Count the number of Locations
     * const count = await prisma.location.count({
     *   where: {
     *     // ... the filter for the Locations we want to count
     *   }
     * })
    **/
    count<T extends LocationCountArgs>(
      args?: Subset<T, LocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LocationAggregateArgs>(args: Subset<T, LocationAggregateArgs>): Prisma.PrismaPromise<GetLocationAggregateType<T>>

    /**
     * Group by Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LocationGroupByArgs['orderBy'] }
        : { orderBy?: LocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Location model
   */
  readonly fields: LocationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Location.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LocationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    guesses<T extends Location$guessesArgs<ExtArgs> = {}>(args?: Subset<T, Location$guessesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GuessPayload<ExtArgs>, T, "findMany"> | Null>
    images<T extends Location$imagesArgs<ExtArgs> = {}>(args?: Subset<T, Location$imagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationImagePayload<ExtArgs>, T, "findMany"> | Null>
    sets<T extends Location$setsArgs<ExtArgs> = {}>(args?: Subset<T, Location$setsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationSetMappingPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Location model
   */ 
  interface LocationFieldRefs {
    readonly id: FieldRef<"Location", 'String'>
    readonly name: FieldRef<"Location", 'String'>
    readonly description: FieldRef<"Location", 'String'>
    readonly latitude: FieldRef<"Location", 'Decimal'>
    readonly longitude: FieldRef<"Location", 'Decimal'>
    readonly difficulty: FieldRef<"Location", 'Int'>
    readonly createdAt: FieldRef<"Location", 'DateTime'>
    readonly updatedAt: FieldRef<"Location", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Location findUnique
   */
  export type LocationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location findUniqueOrThrow
   */
  export type LocationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location findFirst
   */
  export type LocationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
     */
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location findFirstOrThrow
   */
  export type LocationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
     */
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location findMany
   */
  export type LocationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Locations to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location create
   */
  export type LocationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The data needed to create a Location.
     */
    data: XOR<LocationCreateInput, LocationUncheckedCreateInput>
  }

  /**
   * Location createMany
   */
  export type LocationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Locations.
     */
    data: LocationCreateManyInput | LocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Location createManyAndReturn
   */
  export type LocationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Locations.
     */
    data: LocationCreateManyInput | LocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Location update
   */
  export type LocationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The data needed to update a Location.
     */
    data: XOR<LocationUpdateInput, LocationUncheckedUpdateInput>
    /**
     * Choose, which Location to update.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location updateMany
   */
  export type LocationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Locations.
     */
    data: XOR<LocationUpdateManyMutationInput, LocationUncheckedUpdateManyInput>
    /**
     * Filter which Locations to update
     */
    where?: LocationWhereInput
  }

  /**
   * Location upsert
   */
  export type LocationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The filter to search for the Location to update in case it exists.
     */
    where: LocationWhereUniqueInput
    /**
     * In case the Location found by the `where` argument doesn't exist, create a new Location with this data.
     */
    create: XOR<LocationCreateInput, LocationUncheckedCreateInput>
    /**
     * In case the Location was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LocationUpdateInput, LocationUncheckedUpdateInput>
  }

  /**
   * Location delete
   */
  export type LocationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter which Location to delete.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location deleteMany
   */
  export type LocationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Locations to delete
     */
    where?: LocationWhereInput
  }

  /**
   * Location.guesses
   */
  export type Location$guessesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guess
     */
    select?: GuessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuessInclude<ExtArgs> | null
    where?: GuessWhereInput
    orderBy?: GuessOrderByWithRelationInput | GuessOrderByWithRelationInput[]
    cursor?: GuessWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GuessScalarFieldEnum | GuessScalarFieldEnum[]
  }

  /**
   * Location.images
   */
  export type Location$imagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationImage
     */
    select?: LocationImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationImageInclude<ExtArgs> | null
    where?: LocationImageWhereInput
    orderBy?: LocationImageOrderByWithRelationInput | LocationImageOrderByWithRelationInput[]
    cursor?: LocationImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LocationImageScalarFieldEnum | LocationImageScalarFieldEnum[]
  }

  /**
   * Location.sets
   */
  export type Location$setsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationSetMapping
     */
    select?: LocationSetMappingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationSetMappingInclude<ExtArgs> | null
    where?: LocationSetMappingWhereInput
    orderBy?: LocationSetMappingOrderByWithRelationInput | LocationSetMappingOrderByWithRelationInput[]
    cursor?: LocationSetMappingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LocationSetMappingScalarFieldEnum | LocationSetMappingScalarFieldEnum[]
  }

  /**
   * Location without action
   */
  export type LocationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
  }


  /**
   * Model LocationSet
   */

  export type AggregateLocationSet = {
    _count: LocationSetCountAggregateOutputType | null
    _avg: LocationSetAvgAggregateOutputType | null
    _sum: LocationSetSumAggregateOutputType | null
    _min: LocationSetMinAggregateOutputType | null
    _max: LocationSetMaxAggregateOutputType | null
  }

  export type LocationSetAvgAggregateOutputType = {
    difficulty: number | null
  }

  export type LocationSetSumAggregateOutputType = {
    difficulty: number | null
  }

  export type LocationSetMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    difficulty: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LocationSetMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    difficulty: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LocationSetCountAggregateOutputType = {
    id: number
    name: number
    description: number
    difficulty: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LocationSetAvgAggregateInputType = {
    difficulty?: true
  }

  export type LocationSetSumAggregateInputType = {
    difficulty?: true
  }

  export type LocationSetMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    difficulty?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LocationSetMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    difficulty?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LocationSetCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    difficulty?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LocationSetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LocationSet to aggregate.
     */
    where?: LocationSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LocationSets to fetch.
     */
    orderBy?: LocationSetOrderByWithRelationInput | LocationSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LocationSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LocationSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LocationSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LocationSets
    **/
    _count?: true | LocationSetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LocationSetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LocationSetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LocationSetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LocationSetMaxAggregateInputType
  }

  export type GetLocationSetAggregateType<T extends LocationSetAggregateArgs> = {
        [P in keyof T & keyof AggregateLocationSet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLocationSet[P]>
      : GetScalarType<T[P], AggregateLocationSet[P]>
  }




  export type LocationSetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationSetWhereInput
    orderBy?: LocationSetOrderByWithAggregationInput | LocationSetOrderByWithAggregationInput[]
    by: LocationSetScalarFieldEnum[] | LocationSetScalarFieldEnum
    having?: LocationSetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LocationSetCountAggregateInputType | true
    _avg?: LocationSetAvgAggregateInputType
    _sum?: LocationSetSumAggregateInputType
    _min?: LocationSetMinAggregateInputType
    _max?: LocationSetMaxAggregateInputType
  }

  export type LocationSetGroupByOutputType = {
    id: string
    name: string
    description: string | null
    difficulty: number | null
    createdAt: Date
    updatedAt: Date
    _count: LocationSetCountAggregateOutputType | null
    _avg: LocationSetAvgAggregateOutputType | null
    _sum: LocationSetSumAggregateOutputType | null
    _min: LocationSetMinAggregateOutputType | null
    _max: LocationSetMaxAggregateOutputType | null
  }

  type GetLocationSetGroupByPayload<T extends LocationSetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LocationSetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LocationSetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LocationSetGroupByOutputType[P]>
            : GetScalarType<T[P], LocationSetGroupByOutputType[P]>
        }
      >
    >


  export type LocationSetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    difficulty?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    gameSessions?: boolean | LocationSet$gameSessionsArgs<ExtArgs>
    locations?: boolean | LocationSet$locationsArgs<ExtArgs>
    _count?: boolean | LocationSetCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["locationSet"]>

  export type LocationSetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    difficulty?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["locationSet"]>

  export type LocationSetSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    difficulty?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type LocationSetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gameSessions?: boolean | LocationSet$gameSessionsArgs<ExtArgs>
    locations?: boolean | LocationSet$locationsArgs<ExtArgs>
    _count?: boolean | LocationSetCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LocationSetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $LocationSetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LocationSet"
    objects: {
      gameSessions: Prisma.$GameSessionPayload<ExtArgs>[]
      locations: Prisma.$LocationSetMappingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      difficulty: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["locationSet"]>
    composites: {}
  }

  type LocationSetGetPayload<S extends boolean | null | undefined | LocationSetDefaultArgs> = $Result.GetResult<Prisma.$LocationSetPayload, S>

  type LocationSetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LocationSetFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LocationSetCountAggregateInputType | true
    }

  export interface LocationSetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LocationSet'], meta: { name: 'LocationSet' } }
    /**
     * Find zero or one LocationSet that matches the filter.
     * @param {LocationSetFindUniqueArgs} args - Arguments to find a LocationSet
     * @example
     * // Get one LocationSet
     * const locationSet = await prisma.locationSet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LocationSetFindUniqueArgs>(args: SelectSubset<T, LocationSetFindUniqueArgs<ExtArgs>>): Prisma__LocationSetClient<$Result.GetResult<Prisma.$LocationSetPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one LocationSet that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LocationSetFindUniqueOrThrowArgs} args - Arguments to find a LocationSet
     * @example
     * // Get one LocationSet
     * const locationSet = await prisma.locationSet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LocationSetFindUniqueOrThrowArgs>(args: SelectSubset<T, LocationSetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LocationSetClient<$Result.GetResult<Prisma.$LocationSetPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first LocationSet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationSetFindFirstArgs} args - Arguments to find a LocationSet
     * @example
     * // Get one LocationSet
     * const locationSet = await prisma.locationSet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LocationSetFindFirstArgs>(args?: SelectSubset<T, LocationSetFindFirstArgs<ExtArgs>>): Prisma__LocationSetClient<$Result.GetResult<Prisma.$LocationSetPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first LocationSet that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationSetFindFirstOrThrowArgs} args - Arguments to find a LocationSet
     * @example
     * // Get one LocationSet
     * const locationSet = await prisma.locationSet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LocationSetFindFirstOrThrowArgs>(args?: SelectSubset<T, LocationSetFindFirstOrThrowArgs<ExtArgs>>): Prisma__LocationSetClient<$Result.GetResult<Prisma.$LocationSetPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more LocationSets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationSetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LocationSets
     * const locationSets = await prisma.locationSet.findMany()
     * 
     * // Get first 10 LocationSets
     * const locationSets = await prisma.locationSet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const locationSetWithIdOnly = await prisma.locationSet.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LocationSetFindManyArgs>(args?: SelectSubset<T, LocationSetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationSetPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a LocationSet.
     * @param {LocationSetCreateArgs} args - Arguments to create a LocationSet.
     * @example
     * // Create one LocationSet
     * const LocationSet = await prisma.locationSet.create({
     *   data: {
     *     // ... data to create a LocationSet
     *   }
     * })
     * 
     */
    create<T extends LocationSetCreateArgs>(args: SelectSubset<T, LocationSetCreateArgs<ExtArgs>>): Prisma__LocationSetClient<$Result.GetResult<Prisma.$LocationSetPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many LocationSets.
     * @param {LocationSetCreateManyArgs} args - Arguments to create many LocationSets.
     * @example
     * // Create many LocationSets
     * const locationSet = await prisma.locationSet.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LocationSetCreateManyArgs>(args?: SelectSubset<T, LocationSetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LocationSets and returns the data saved in the database.
     * @param {LocationSetCreateManyAndReturnArgs} args - Arguments to create many LocationSets.
     * @example
     * // Create many LocationSets
     * const locationSet = await prisma.locationSet.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LocationSets and only return the `id`
     * const locationSetWithIdOnly = await prisma.locationSet.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LocationSetCreateManyAndReturnArgs>(args?: SelectSubset<T, LocationSetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationSetPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a LocationSet.
     * @param {LocationSetDeleteArgs} args - Arguments to delete one LocationSet.
     * @example
     * // Delete one LocationSet
     * const LocationSet = await prisma.locationSet.delete({
     *   where: {
     *     // ... filter to delete one LocationSet
     *   }
     * })
     * 
     */
    delete<T extends LocationSetDeleteArgs>(args: SelectSubset<T, LocationSetDeleteArgs<ExtArgs>>): Prisma__LocationSetClient<$Result.GetResult<Prisma.$LocationSetPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one LocationSet.
     * @param {LocationSetUpdateArgs} args - Arguments to update one LocationSet.
     * @example
     * // Update one LocationSet
     * const locationSet = await prisma.locationSet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LocationSetUpdateArgs>(args: SelectSubset<T, LocationSetUpdateArgs<ExtArgs>>): Prisma__LocationSetClient<$Result.GetResult<Prisma.$LocationSetPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more LocationSets.
     * @param {LocationSetDeleteManyArgs} args - Arguments to filter LocationSets to delete.
     * @example
     * // Delete a few LocationSets
     * const { count } = await prisma.locationSet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LocationSetDeleteManyArgs>(args?: SelectSubset<T, LocationSetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LocationSets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationSetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LocationSets
     * const locationSet = await prisma.locationSet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LocationSetUpdateManyArgs>(args: SelectSubset<T, LocationSetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LocationSet.
     * @param {LocationSetUpsertArgs} args - Arguments to update or create a LocationSet.
     * @example
     * // Update or create a LocationSet
     * const locationSet = await prisma.locationSet.upsert({
     *   create: {
     *     // ... data to create a LocationSet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LocationSet we want to update
     *   }
     * })
     */
    upsert<T extends LocationSetUpsertArgs>(args: SelectSubset<T, LocationSetUpsertArgs<ExtArgs>>): Prisma__LocationSetClient<$Result.GetResult<Prisma.$LocationSetPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of LocationSets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationSetCountArgs} args - Arguments to filter LocationSets to count.
     * @example
     * // Count the number of LocationSets
     * const count = await prisma.locationSet.count({
     *   where: {
     *     // ... the filter for the LocationSets we want to count
     *   }
     * })
    **/
    count<T extends LocationSetCountArgs>(
      args?: Subset<T, LocationSetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LocationSetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LocationSet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationSetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LocationSetAggregateArgs>(args: Subset<T, LocationSetAggregateArgs>): Prisma.PrismaPromise<GetLocationSetAggregateType<T>>

    /**
     * Group by LocationSet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationSetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LocationSetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LocationSetGroupByArgs['orderBy'] }
        : { orderBy?: LocationSetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LocationSetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLocationSetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LocationSet model
   */
  readonly fields: LocationSetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LocationSet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LocationSetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    gameSessions<T extends LocationSet$gameSessionsArgs<ExtArgs> = {}>(args?: Subset<T, LocationSet$gameSessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "findMany"> | Null>
    locations<T extends LocationSet$locationsArgs<ExtArgs> = {}>(args?: Subset<T, LocationSet$locationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationSetMappingPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LocationSet model
   */ 
  interface LocationSetFieldRefs {
    readonly id: FieldRef<"LocationSet", 'String'>
    readonly name: FieldRef<"LocationSet", 'String'>
    readonly description: FieldRef<"LocationSet", 'String'>
    readonly difficulty: FieldRef<"LocationSet", 'Int'>
    readonly createdAt: FieldRef<"LocationSet", 'DateTime'>
    readonly updatedAt: FieldRef<"LocationSet", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LocationSet findUnique
   */
  export type LocationSetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationSet
     */
    select?: LocationSetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationSetInclude<ExtArgs> | null
    /**
     * Filter, which LocationSet to fetch.
     */
    where: LocationSetWhereUniqueInput
  }

  /**
   * LocationSet findUniqueOrThrow
   */
  export type LocationSetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationSet
     */
    select?: LocationSetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationSetInclude<ExtArgs> | null
    /**
     * Filter, which LocationSet to fetch.
     */
    where: LocationSetWhereUniqueInput
  }

  /**
   * LocationSet findFirst
   */
  export type LocationSetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationSet
     */
    select?: LocationSetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationSetInclude<ExtArgs> | null
    /**
     * Filter, which LocationSet to fetch.
     */
    where?: LocationSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LocationSets to fetch.
     */
    orderBy?: LocationSetOrderByWithRelationInput | LocationSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LocationSets.
     */
    cursor?: LocationSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LocationSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LocationSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LocationSets.
     */
    distinct?: LocationSetScalarFieldEnum | LocationSetScalarFieldEnum[]
  }

  /**
   * LocationSet findFirstOrThrow
   */
  export type LocationSetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationSet
     */
    select?: LocationSetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationSetInclude<ExtArgs> | null
    /**
     * Filter, which LocationSet to fetch.
     */
    where?: LocationSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LocationSets to fetch.
     */
    orderBy?: LocationSetOrderByWithRelationInput | LocationSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LocationSets.
     */
    cursor?: LocationSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LocationSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LocationSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LocationSets.
     */
    distinct?: LocationSetScalarFieldEnum | LocationSetScalarFieldEnum[]
  }

  /**
   * LocationSet findMany
   */
  export type LocationSetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationSet
     */
    select?: LocationSetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationSetInclude<ExtArgs> | null
    /**
     * Filter, which LocationSets to fetch.
     */
    where?: LocationSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LocationSets to fetch.
     */
    orderBy?: LocationSetOrderByWithRelationInput | LocationSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LocationSets.
     */
    cursor?: LocationSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LocationSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LocationSets.
     */
    skip?: number
    distinct?: LocationSetScalarFieldEnum | LocationSetScalarFieldEnum[]
  }

  /**
   * LocationSet create
   */
  export type LocationSetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationSet
     */
    select?: LocationSetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationSetInclude<ExtArgs> | null
    /**
     * The data needed to create a LocationSet.
     */
    data: XOR<LocationSetCreateInput, LocationSetUncheckedCreateInput>
  }

  /**
   * LocationSet createMany
   */
  export type LocationSetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LocationSets.
     */
    data: LocationSetCreateManyInput | LocationSetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LocationSet createManyAndReturn
   */
  export type LocationSetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationSet
     */
    select?: LocationSetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many LocationSets.
     */
    data: LocationSetCreateManyInput | LocationSetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LocationSet update
   */
  export type LocationSetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationSet
     */
    select?: LocationSetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationSetInclude<ExtArgs> | null
    /**
     * The data needed to update a LocationSet.
     */
    data: XOR<LocationSetUpdateInput, LocationSetUncheckedUpdateInput>
    /**
     * Choose, which LocationSet to update.
     */
    where: LocationSetWhereUniqueInput
  }

  /**
   * LocationSet updateMany
   */
  export type LocationSetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LocationSets.
     */
    data: XOR<LocationSetUpdateManyMutationInput, LocationSetUncheckedUpdateManyInput>
    /**
     * Filter which LocationSets to update
     */
    where?: LocationSetWhereInput
  }

  /**
   * LocationSet upsert
   */
  export type LocationSetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationSet
     */
    select?: LocationSetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationSetInclude<ExtArgs> | null
    /**
     * The filter to search for the LocationSet to update in case it exists.
     */
    where: LocationSetWhereUniqueInput
    /**
     * In case the LocationSet found by the `where` argument doesn't exist, create a new LocationSet with this data.
     */
    create: XOR<LocationSetCreateInput, LocationSetUncheckedCreateInput>
    /**
     * In case the LocationSet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LocationSetUpdateInput, LocationSetUncheckedUpdateInput>
  }

  /**
   * LocationSet delete
   */
  export type LocationSetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationSet
     */
    select?: LocationSetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationSetInclude<ExtArgs> | null
    /**
     * Filter which LocationSet to delete.
     */
    where: LocationSetWhereUniqueInput
  }

  /**
   * LocationSet deleteMany
   */
  export type LocationSetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LocationSets to delete
     */
    where?: LocationSetWhereInput
  }

  /**
   * LocationSet.gameSessions
   */
  export type LocationSet$gameSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
    where?: GameSessionWhereInput
    orderBy?: GameSessionOrderByWithRelationInput | GameSessionOrderByWithRelationInput[]
    cursor?: GameSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameSessionScalarFieldEnum | GameSessionScalarFieldEnum[]
  }

  /**
   * LocationSet.locations
   */
  export type LocationSet$locationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationSetMapping
     */
    select?: LocationSetMappingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationSetMappingInclude<ExtArgs> | null
    where?: LocationSetMappingWhereInput
    orderBy?: LocationSetMappingOrderByWithRelationInput | LocationSetMappingOrderByWithRelationInput[]
    cursor?: LocationSetMappingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LocationSetMappingScalarFieldEnum | LocationSetMappingScalarFieldEnum[]
  }

  /**
   * LocationSet without action
   */
  export type LocationSetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationSet
     */
    select?: LocationSetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationSetInclude<ExtArgs> | null
  }


  /**
   * Model LocationSetMapping
   */

  export type AggregateLocationSetMapping = {
    _count: LocationSetMappingCountAggregateOutputType | null
    _avg: LocationSetMappingAvgAggregateOutputType | null
    _sum: LocationSetMappingSumAggregateOutputType | null
    _min: LocationSetMappingMinAggregateOutputType | null
    _max: LocationSetMappingMaxAggregateOutputType | null
  }

  export type LocationSetMappingAvgAggregateOutputType = {
    position: number | null
  }

  export type LocationSetMappingSumAggregateOutputType = {
    position: number | null
  }

  export type LocationSetMappingMinAggregateOutputType = {
    locationId: string | null
    setId: string | null
    position: number | null
  }

  export type LocationSetMappingMaxAggregateOutputType = {
    locationId: string | null
    setId: string | null
    position: number | null
  }

  export type LocationSetMappingCountAggregateOutputType = {
    locationId: number
    setId: number
    position: number
    _all: number
  }


  export type LocationSetMappingAvgAggregateInputType = {
    position?: true
  }

  export type LocationSetMappingSumAggregateInputType = {
    position?: true
  }

  export type LocationSetMappingMinAggregateInputType = {
    locationId?: true
    setId?: true
    position?: true
  }

  export type LocationSetMappingMaxAggregateInputType = {
    locationId?: true
    setId?: true
    position?: true
  }

  export type LocationSetMappingCountAggregateInputType = {
    locationId?: true
    setId?: true
    position?: true
    _all?: true
  }

  export type LocationSetMappingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LocationSetMapping to aggregate.
     */
    where?: LocationSetMappingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LocationSetMappings to fetch.
     */
    orderBy?: LocationSetMappingOrderByWithRelationInput | LocationSetMappingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LocationSetMappingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LocationSetMappings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LocationSetMappings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LocationSetMappings
    **/
    _count?: true | LocationSetMappingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LocationSetMappingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LocationSetMappingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LocationSetMappingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LocationSetMappingMaxAggregateInputType
  }

  export type GetLocationSetMappingAggregateType<T extends LocationSetMappingAggregateArgs> = {
        [P in keyof T & keyof AggregateLocationSetMapping]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLocationSetMapping[P]>
      : GetScalarType<T[P], AggregateLocationSetMapping[P]>
  }




  export type LocationSetMappingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationSetMappingWhereInput
    orderBy?: LocationSetMappingOrderByWithAggregationInput | LocationSetMappingOrderByWithAggregationInput[]
    by: LocationSetMappingScalarFieldEnum[] | LocationSetMappingScalarFieldEnum
    having?: LocationSetMappingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LocationSetMappingCountAggregateInputType | true
    _avg?: LocationSetMappingAvgAggregateInputType
    _sum?: LocationSetMappingSumAggregateInputType
    _min?: LocationSetMappingMinAggregateInputType
    _max?: LocationSetMappingMaxAggregateInputType
  }

  export type LocationSetMappingGroupByOutputType = {
    locationId: string
    setId: string
    position: number
    _count: LocationSetMappingCountAggregateOutputType | null
    _avg: LocationSetMappingAvgAggregateOutputType | null
    _sum: LocationSetMappingSumAggregateOutputType | null
    _min: LocationSetMappingMinAggregateOutputType | null
    _max: LocationSetMappingMaxAggregateOutputType | null
  }

  type GetLocationSetMappingGroupByPayload<T extends LocationSetMappingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LocationSetMappingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LocationSetMappingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LocationSetMappingGroupByOutputType[P]>
            : GetScalarType<T[P], LocationSetMappingGroupByOutputType[P]>
        }
      >
    >


  export type LocationSetMappingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    locationId?: boolean
    setId?: boolean
    position?: boolean
    location?: boolean | LocationDefaultArgs<ExtArgs>
    set?: boolean | LocationSetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["locationSetMapping"]>

  export type LocationSetMappingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    locationId?: boolean
    setId?: boolean
    position?: boolean
    location?: boolean | LocationDefaultArgs<ExtArgs>
    set?: boolean | LocationSetDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["locationSetMapping"]>

  export type LocationSetMappingSelectScalar = {
    locationId?: boolean
    setId?: boolean
    position?: boolean
  }

  export type LocationSetMappingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    location?: boolean | LocationDefaultArgs<ExtArgs>
    set?: boolean | LocationSetDefaultArgs<ExtArgs>
  }
  export type LocationSetMappingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    location?: boolean | LocationDefaultArgs<ExtArgs>
    set?: boolean | LocationSetDefaultArgs<ExtArgs>
  }

  export type $LocationSetMappingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LocationSetMapping"
    objects: {
      location: Prisma.$LocationPayload<ExtArgs>
      set: Prisma.$LocationSetPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      locationId: string
      setId: string
      position: number
    }, ExtArgs["result"]["locationSetMapping"]>
    composites: {}
  }

  type LocationSetMappingGetPayload<S extends boolean | null | undefined | LocationSetMappingDefaultArgs> = $Result.GetResult<Prisma.$LocationSetMappingPayload, S>

  type LocationSetMappingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LocationSetMappingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LocationSetMappingCountAggregateInputType | true
    }

  export interface LocationSetMappingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LocationSetMapping'], meta: { name: 'LocationSetMapping' } }
    /**
     * Find zero or one LocationSetMapping that matches the filter.
     * @param {LocationSetMappingFindUniqueArgs} args - Arguments to find a LocationSetMapping
     * @example
     * // Get one LocationSetMapping
     * const locationSetMapping = await prisma.locationSetMapping.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LocationSetMappingFindUniqueArgs>(args: SelectSubset<T, LocationSetMappingFindUniqueArgs<ExtArgs>>): Prisma__LocationSetMappingClient<$Result.GetResult<Prisma.$LocationSetMappingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one LocationSetMapping that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LocationSetMappingFindUniqueOrThrowArgs} args - Arguments to find a LocationSetMapping
     * @example
     * // Get one LocationSetMapping
     * const locationSetMapping = await prisma.locationSetMapping.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LocationSetMappingFindUniqueOrThrowArgs>(args: SelectSubset<T, LocationSetMappingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LocationSetMappingClient<$Result.GetResult<Prisma.$LocationSetMappingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first LocationSetMapping that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationSetMappingFindFirstArgs} args - Arguments to find a LocationSetMapping
     * @example
     * // Get one LocationSetMapping
     * const locationSetMapping = await prisma.locationSetMapping.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LocationSetMappingFindFirstArgs>(args?: SelectSubset<T, LocationSetMappingFindFirstArgs<ExtArgs>>): Prisma__LocationSetMappingClient<$Result.GetResult<Prisma.$LocationSetMappingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first LocationSetMapping that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationSetMappingFindFirstOrThrowArgs} args - Arguments to find a LocationSetMapping
     * @example
     * // Get one LocationSetMapping
     * const locationSetMapping = await prisma.locationSetMapping.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LocationSetMappingFindFirstOrThrowArgs>(args?: SelectSubset<T, LocationSetMappingFindFirstOrThrowArgs<ExtArgs>>): Prisma__LocationSetMappingClient<$Result.GetResult<Prisma.$LocationSetMappingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more LocationSetMappings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationSetMappingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LocationSetMappings
     * const locationSetMappings = await prisma.locationSetMapping.findMany()
     * 
     * // Get first 10 LocationSetMappings
     * const locationSetMappings = await prisma.locationSetMapping.findMany({ take: 10 })
     * 
     * // Only select the `locationId`
     * const locationSetMappingWithLocationIdOnly = await prisma.locationSetMapping.findMany({ select: { locationId: true } })
     * 
     */
    findMany<T extends LocationSetMappingFindManyArgs>(args?: SelectSubset<T, LocationSetMappingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationSetMappingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a LocationSetMapping.
     * @param {LocationSetMappingCreateArgs} args - Arguments to create a LocationSetMapping.
     * @example
     * // Create one LocationSetMapping
     * const LocationSetMapping = await prisma.locationSetMapping.create({
     *   data: {
     *     // ... data to create a LocationSetMapping
     *   }
     * })
     * 
     */
    create<T extends LocationSetMappingCreateArgs>(args: SelectSubset<T, LocationSetMappingCreateArgs<ExtArgs>>): Prisma__LocationSetMappingClient<$Result.GetResult<Prisma.$LocationSetMappingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many LocationSetMappings.
     * @param {LocationSetMappingCreateManyArgs} args - Arguments to create many LocationSetMappings.
     * @example
     * // Create many LocationSetMappings
     * const locationSetMapping = await prisma.locationSetMapping.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LocationSetMappingCreateManyArgs>(args?: SelectSubset<T, LocationSetMappingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LocationSetMappings and returns the data saved in the database.
     * @param {LocationSetMappingCreateManyAndReturnArgs} args - Arguments to create many LocationSetMappings.
     * @example
     * // Create many LocationSetMappings
     * const locationSetMapping = await prisma.locationSetMapping.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LocationSetMappings and only return the `locationId`
     * const locationSetMappingWithLocationIdOnly = await prisma.locationSetMapping.createManyAndReturn({ 
     *   select: { locationId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LocationSetMappingCreateManyAndReturnArgs>(args?: SelectSubset<T, LocationSetMappingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationSetMappingPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a LocationSetMapping.
     * @param {LocationSetMappingDeleteArgs} args - Arguments to delete one LocationSetMapping.
     * @example
     * // Delete one LocationSetMapping
     * const LocationSetMapping = await prisma.locationSetMapping.delete({
     *   where: {
     *     // ... filter to delete one LocationSetMapping
     *   }
     * })
     * 
     */
    delete<T extends LocationSetMappingDeleteArgs>(args: SelectSubset<T, LocationSetMappingDeleteArgs<ExtArgs>>): Prisma__LocationSetMappingClient<$Result.GetResult<Prisma.$LocationSetMappingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one LocationSetMapping.
     * @param {LocationSetMappingUpdateArgs} args - Arguments to update one LocationSetMapping.
     * @example
     * // Update one LocationSetMapping
     * const locationSetMapping = await prisma.locationSetMapping.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LocationSetMappingUpdateArgs>(args: SelectSubset<T, LocationSetMappingUpdateArgs<ExtArgs>>): Prisma__LocationSetMappingClient<$Result.GetResult<Prisma.$LocationSetMappingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more LocationSetMappings.
     * @param {LocationSetMappingDeleteManyArgs} args - Arguments to filter LocationSetMappings to delete.
     * @example
     * // Delete a few LocationSetMappings
     * const { count } = await prisma.locationSetMapping.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LocationSetMappingDeleteManyArgs>(args?: SelectSubset<T, LocationSetMappingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LocationSetMappings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationSetMappingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LocationSetMappings
     * const locationSetMapping = await prisma.locationSetMapping.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LocationSetMappingUpdateManyArgs>(args: SelectSubset<T, LocationSetMappingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LocationSetMapping.
     * @param {LocationSetMappingUpsertArgs} args - Arguments to update or create a LocationSetMapping.
     * @example
     * // Update or create a LocationSetMapping
     * const locationSetMapping = await prisma.locationSetMapping.upsert({
     *   create: {
     *     // ... data to create a LocationSetMapping
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LocationSetMapping we want to update
     *   }
     * })
     */
    upsert<T extends LocationSetMappingUpsertArgs>(args: SelectSubset<T, LocationSetMappingUpsertArgs<ExtArgs>>): Prisma__LocationSetMappingClient<$Result.GetResult<Prisma.$LocationSetMappingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of LocationSetMappings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationSetMappingCountArgs} args - Arguments to filter LocationSetMappings to count.
     * @example
     * // Count the number of LocationSetMappings
     * const count = await prisma.locationSetMapping.count({
     *   where: {
     *     // ... the filter for the LocationSetMappings we want to count
     *   }
     * })
    **/
    count<T extends LocationSetMappingCountArgs>(
      args?: Subset<T, LocationSetMappingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LocationSetMappingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LocationSetMapping.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationSetMappingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LocationSetMappingAggregateArgs>(args: Subset<T, LocationSetMappingAggregateArgs>): Prisma.PrismaPromise<GetLocationSetMappingAggregateType<T>>

    /**
     * Group by LocationSetMapping.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationSetMappingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LocationSetMappingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LocationSetMappingGroupByArgs['orderBy'] }
        : { orderBy?: LocationSetMappingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LocationSetMappingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLocationSetMappingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LocationSetMapping model
   */
  readonly fields: LocationSetMappingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LocationSetMapping.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LocationSetMappingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    location<T extends LocationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LocationDefaultArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    set<T extends LocationSetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LocationSetDefaultArgs<ExtArgs>>): Prisma__LocationSetClient<$Result.GetResult<Prisma.$LocationSetPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LocationSetMapping model
   */ 
  interface LocationSetMappingFieldRefs {
    readonly locationId: FieldRef<"LocationSetMapping", 'String'>
    readonly setId: FieldRef<"LocationSetMapping", 'String'>
    readonly position: FieldRef<"LocationSetMapping", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * LocationSetMapping findUnique
   */
  export type LocationSetMappingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationSetMapping
     */
    select?: LocationSetMappingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationSetMappingInclude<ExtArgs> | null
    /**
     * Filter, which LocationSetMapping to fetch.
     */
    where: LocationSetMappingWhereUniqueInput
  }

  /**
   * LocationSetMapping findUniqueOrThrow
   */
  export type LocationSetMappingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationSetMapping
     */
    select?: LocationSetMappingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationSetMappingInclude<ExtArgs> | null
    /**
     * Filter, which LocationSetMapping to fetch.
     */
    where: LocationSetMappingWhereUniqueInput
  }

  /**
   * LocationSetMapping findFirst
   */
  export type LocationSetMappingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationSetMapping
     */
    select?: LocationSetMappingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationSetMappingInclude<ExtArgs> | null
    /**
     * Filter, which LocationSetMapping to fetch.
     */
    where?: LocationSetMappingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LocationSetMappings to fetch.
     */
    orderBy?: LocationSetMappingOrderByWithRelationInput | LocationSetMappingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LocationSetMappings.
     */
    cursor?: LocationSetMappingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LocationSetMappings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LocationSetMappings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LocationSetMappings.
     */
    distinct?: LocationSetMappingScalarFieldEnum | LocationSetMappingScalarFieldEnum[]
  }

  /**
   * LocationSetMapping findFirstOrThrow
   */
  export type LocationSetMappingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationSetMapping
     */
    select?: LocationSetMappingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationSetMappingInclude<ExtArgs> | null
    /**
     * Filter, which LocationSetMapping to fetch.
     */
    where?: LocationSetMappingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LocationSetMappings to fetch.
     */
    orderBy?: LocationSetMappingOrderByWithRelationInput | LocationSetMappingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LocationSetMappings.
     */
    cursor?: LocationSetMappingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LocationSetMappings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LocationSetMappings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LocationSetMappings.
     */
    distinct?: LocationSetMappingScalarFieldEnum | LocationSetMappingScalarFieldEnum[]
  }

  /**
   * LocationSetMapping findMany
   */
  export type LocationSetMappingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationSetMapping
     */
    select?: LocationSetMappingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationSetMappingInclude<ExtArgs> | null
    /**
     * Filter, which LocationSetMappings to fetch.
     */
    where?: LocationSetMappingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LocationSetMappings to fetch.
     */
    orderBy?: LocationSetMappingOrderByWithRelationInput | LocationSetMappingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LocationSetMappings.
     */
    cursor?: LocationSetMappingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LocationSetMappings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LocationSetMappings.
     */
    skip?: number
    distinct?: LocationSetMappingScalarFieldEnum | LocationSetMappingScalarFieldEnum[]
  }

  /**
   * LocationSetMapping create
   */
  export type LocationSetMappingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationSetMapping
     */
    select?: LocationSetMappingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationSetMappingInclude<ExtArgs> | null
    /**
     * The data needed to create a LocationSetMapping.
     */
    data: XOR<LocationSetMappingCreateInput, LocationSetMappingUncheckedCreateInput>
  }

  /**
   * LocationSetMapping createMany
   */
  export type LocationSetMappingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LocationSetMappings.
     */
    data: LocationSetMappingCreateManyInput | LocationSetMappingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LocationSetMapping createManyAndReturn
   */
  export type LocationSetMappingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationSetMapping
     */
    select?: LocationSetMappingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many LocationSetMappings.
     */
    data: LocationSetMappingCreateManyInput | LocationSetMappingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationSetMappingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LocationSetMapping update
   */
  export type LocationSetMappingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationSetMapping
     */
    select?: LocationSetMappingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationSetMappingInclude<ExtArgs> | null
    /**
     * The data needed to update a LocationSetMapping.
     */
    data: XOR<LocationSetMappingUpdateInput, LocationSetMappingUncheckedUpdateInput>
    /**
     * Choose, which LocationSetMapping to update.
     */
    where: LocationSetMappingWhereUniqueInput
  }

  /**
   * LocationSetMapping updateMany
   */
  export type LocationSetMappingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LocationSetMappings.
     */
    data: XOR<LocationSetMappingUpdateManyMutationInput, LocationSetMappingUncheckedUpdateManyInput>
    /**
     * Filter which LocationSetMappings to update
     */
    where?: LocationSetMappingWhereInput
  }

  /**
   * LocationSetMapping upsert
   */
  export type LocationSetMappingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationSetMapping
     */
    select?: LocationSetMappingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationSetMappingInclude<ExtArgs> | null
    /**
     * The filter to search for the LocationSetMapping to update in case it exists.
     */
    where: LocationSetMappingWhereUniqueInput
    /**
     * In case the LocationSetMapping found by the `where` argument doesn't exist, create a new LocationSetMapping with this data.
     */
    create: XOR<LocationSetMappingCreateInput, LocationSetMappingUncheckedCreateInput>
    /**
     * In case the LocationSetMapping was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LocationSetMappingUpdateInput, LocationSetMappingUncheckedUpdateInput>
  }

  /**
   * LocationSetMapping delete
   */
  export type LocationSetMappingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationSetMapping
     */
    select?: LocationSetMappingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationSetMappingInclude<ExtArgs> | null
    /**
     * Filter which LocationSetMapping to delete.
     */
    where: LocationSetMappingWhereUniqueInput
  }

  /**
   * LocationSetMapping deleteMany
   */
  export type LocationSetMappingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LocationSetMappings to delete
     */
    where?: LocationSetMappingWhereInput
  }

  /**
   * LocationSetMapping without action
   */
  export type LocationSetMappingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationSetMapping
     */
    select?: LocationSetMappingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationSetMappingInclude<ExtArgs> | null
  }


  /**
   * Model LocationImage
   */

  export type AggregateLocationImage = {
    _count: LocationImageCountAggregateOutputType | null
    _avg: LocationImageAvgAggregateOutputType | null
    _sum: LocationImageSumAggregateOutputType | null
    _min: LocationImageMinAggregateOutputType | null
    _max: LocationImageMaxAggregateOutputType | null
  }

  export type LocationImageAvgAggregateOutputType = {
    width: number | null
    height: number | null
  }

  export type LocationImageSumAggregateOutputType = {
    width: number | null
    height: number | null
  }

  export type LocationImageMinAggregateOutputType = {
    id: string | null
    locationId: string | null
    url: string | null
    isPrimary: boolean | null
    width: number | null
    height: number | null
    format: string | null
    createdAt: Date | null
  }

  export type LocationImageMaxAggregateOutputType = {
    id: string | null
    locationId: string | null
    url: string | null
    isPrimary: boolean | null
    width: number | null
    height: number | null
    format: string | null
    createdAt: Date | null
  }

  export type LocationImageCountAggregateOutputType = {
    id: number
    locationId: number
    url: number
    isPrimary: number
    width: number
    height: number
    format: number
    createdAt: number
    _all: number
  }


  export type LocationImageAvgAggregateInputType = {
    width?: true
    height?: true
  }

  export type LocationImageSumAggregateInputType = {
    width?: true
    height?: true
  }

  export type LocationImageMinAggregateInputType = {
    id?: true
    locationId?: true
    url?: true
    isPrimary?: true
    width?: true
    height?: true
    format?: true
    createdAt?: true
  }

  export type LocationImageMaxAggregateInputType = {
    id?: true
    locationId?: true
    url?: true
    isPrimary?: true
    width?: true
    height?: true
    format?: true
    createdAt?: true
  }

  export type LocationImageCountAggregateInputType = {
    id?: true
    locationId?: true
    url?: true
    isPrimary?: true
    width?: true
    height?: true
    format?: true
    createdAt?: true
    _all?: true
  }

  export type LocationImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LocationImage to aggregate.
     */
    where?: LocationImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LocationImages to fetch.
     */
    orderBy?: LocationImageOrderByWithRelationInput | LocationImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LocationImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LocationImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LocationImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LocationImages
    **/
    _count?: true | LocationImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LocationImageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LocationImageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LocationImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LocationImageMaxAggregateInputType
  }

  export type GetLocationImageAggregateType<T extends LocationImageAggregateArgs> = {
        [P in keyof T & keyof AggregateLocationImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLocationImage[P]>
      : GetScalarType<T[P], AggregateLocationImage[P]>
  }




  export type LocationImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationImageWhereInput
    orderBy?: LocationImageOrderByWithAggregationInput | LocationImageOrderByWithAggregationInput[]
    by: LocationImageScalarFieldEnum[] | LocationImageScalarFieldEnum
    having?: LocationImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LocationImageCountAggregateInputType | true
    _avg?: LocationImageAvgAggregateInputType
    _sum?: LocationImageSumAggregateInputType
    _min?: LocationImageMinAggregateInputType
    _max?: LocationImageMaxAggregateInputType
  }

  export type LocationImageGroupByOutputType = {
    id: string
    locationId: string
    url: string
    isPrimary: boolean
    width: number | null
    height: number | null
    format: string | null
    createdAt: Date
    _count: LocationImageCountAggregateOutputType | null
    _avg: LocationImageAvgAggregateOutputType | null
    _sum: LocationImageSumAggregateOutputType | null
    _min: LocationImageMinAggregateOutputType | null
    _max: LocationImageMaxAggregateOutputType | null
  }

  type GetLocationImageGroupByPayload<T extends LocationImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LocationImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LocationImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LocationImageGroupByOutputType[P]>
            : GetScalarType<T[P], LocationImageGroupByOutputType[P]>
        }
      >
    >


  export type LocationImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    locationId?: boolean
    url?: boolean
    isPrimary?: boolean
    width?: boolean
    height?: boolean
    format?: boolean
    createdAt?: boolean
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["locationImage"]>

  export type LocationImageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    locationId?: boolean
    url?: boolean
    isPrimary?: boolean
    width?: boolean
    height?: boolean
    format?: boolean
    createdAt?: boolean
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["locationImage"]>

  export type LocationImageSelectScalar = {
    id?: boolean
    locationId?: boolean
    url?: boolean
    isPrimary?: boolean
    width?: boolean
    height?: boolean
    format?: boolean
    createdAt?: boolean
  }

  export type LocationImageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }
  export type LocationImageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }

  export type $LocationImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LocationImage"
    objects: {
      location: Prisma.$LocationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      locationId: string
      url: string
      isPrimary: boolean
      width: number | null
      height: number | null
      format: string | null
      createdAt: Date
    }, ExtArgs["result"]["locationImage"]>
    composites: {}
  }

  type LocationImageGetPayload<S extends boolean | null | undefined | LocationImageDefaultArgs> = $Result.GetResult<Prisma.$LocationImagePayload, S>

  type LocationImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LocationImageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LocationImageCountAggregateInputType | true
    }

  export interface LocationImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LocationImage'], meta: { name: 'LocationImage' } }
    /**
     * Find zero or one LocationImage that matches the filter.
     * @param {LocationImageFindUniqueArgs} args - Arguments to find a LocationImage
     * @example
     * // Get one LocationImage
     * const locationImage = await prisma.locationImage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LocationImageFindUniqueArgs>(args: SelectSubset<T, LocationImageFindUniqueArgs<ExtArgs>>): Prisma__LocationImageClient<$Result.GetResult<Prisma.$LocationImagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one LocationImage that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LocationImageFindUniqueOrThrowArgs} args - Arguments to find a LocationImage
     * @example
     * // Get one LocationImage
     * const locationImage = await prisma.locationImage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LocationImageFindUniqueOrThrowArgs>(args: SelectSubset<T, LocationImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LocationImageClient<$Result.GetResult<Prisma.$LocationImagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first LocationImage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationImageFindFirstArgs} args - Arguments to find a LocationImage
     * @example
     * // Get one LocationImage
     * const locationImage = await prisma.locationImage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LocationImageFindFirstArgs>(args?: SelectSubset<T, LocationImageFindFirstArgs<ExtArgs>>): Prisma__LocationImageClient<$Result.GetResult<Prisma.$LocationImagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first LocationImage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationImageFindFirstOrThrowArgs} args - Arguments to find a LocationImage
     * @example
     * // Get one LocationImage
     * const locationImage = await prisma.locationImage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LocationImageFindFirstOrThrowArgs>(args?: SelectSubset<T, LocationImageFindFirstOrThrowArgs<ExtArgs>>): Prisma__LocationImageClient<$Result.GetResult<Prisma.$LocationImagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more LocationImages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationImageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LocationImages
     * const locationImages = await prisma.locationImage.findMany()
     * 
     * // Get first 10 LocationImages
     * const locationImages = await prisma.locationImage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const locationImageWithIdOnly = await prisma.locationImage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LocationImageFindManyArgs>(args?: SelectSubset<T, LocationImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationImagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a LocationImage.
     * @param {LocationImageCreateArgs} args - Arguments to create a LocationImage.
     * @example
     * // Create one LocationImage
     * const LocationImage = await prisma.locationImage.create({
     *   data: {
     *     // ... data to create a LocationImage
     *   }
     * })
     * 
     */
    create<T extends LocationImageCreateArgs>(args: SelectSubset<T, LocationImageCreateArgs<ExtArgs>>): Prisma__LocationImageClient<$Result.GetResult<Prisma.$LocationImagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many LocationImages.
     * @param {LocationImageCreateManyArgs} args - Arguments to create many LocationImages.
     * @example
     * // Create many LocationImages
     * const locationImage = await prisma.locationImage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LocationImageCreateManyArgs>(args?: SelectSubset<T, LocationImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LocationImages and returns the data saved in the database.
     * @param {LocationImageCreateManyAndReturnArgs} args - Arguments to create many LocationImages.
     * @example
     * // Create many LocationImages
     * const locationImage = await prisma.locationImage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LocationImages and only return the `id`
     * const locationImageWithIdOnly = await prisma.locationImage.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LocationImageCreateManyAndReturnArgs>(args?: SelectSubset<T, LocationImageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationImagePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a LocationImage.
     * @param {LocationImageDeleteArgs} args - Arguments to delete one LocationImage.
     * @example
     * // Delete one LocationImage
     * const LocationImage = await prisma.locationImage.delete({
     *   where: {
     *     // ... filter to delete one LocationImage
     *   }
     * })
     * 
     */
    delete<T extends LocationImageDeleteArgs>(args: SelectSubset<T, LocationImageDeleteArgs<ExtArgs>>): Prisma__LocationImageClient<$Result.GetResult<Prisma.$LocationImagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one LocationImage.
     * @param {LocationImageUpdateArgs} args - Arguments to update one LocationImage.
     * @example
     * // Update one LocationImage
     * const locationImage = await prisma.locationImage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LocationImageUpdateArgs>(args: SelectSubset<T, LocationImageUpdateArgs<ExtArgs>>): Prisma__LocationImageClient<$Result.GetResult<Prisma.$LocationImagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more LocationImages.
     * @param {LocationImageDeleteManyArgs} args - Arguments to filter LocationImages to delete.
     * @example
     * // Delete a few LocationImages
     * const { count } = await prisma.locationImage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LocationImageDeleteManyArgs>(args?: SelectSubset<T, LocationImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LocationImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LocationImages
     * const locationImage = await prisma.locationImage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LocationImageUpdateManyArgs>(args: SelectSubset<T, LocationImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LocationImage.
     * @param {LocationImageUpsertArgs} args - Arguments to update or create a LocationImage.
     * @example
     * // Update or create a LocationImage
     * const locationImage = await prisma.locationImage.upsert({
     *   create: {
     *     // ... data to create a LocationImage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LocationImage we want to update
     *   }
     * })
     */
    upsert<T extends LocationImageUpsertArgs>(args: SelectSubset<T, LocationImageUpsertArgs<ExtArgs>>): Prisma__LocationImageClient<$Result.GetResult<Prisma.$LocationImagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of LocationImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationImageCountArgs} args - Arguments to filter LocationImages to count.
     * @example
     * // Count the number of LocationImages
     * const count = await prisma.locationImage.count({
     *   where: {
     *     // ... the filter for the LocationImages we want to count
     *   }
     * })
    **/
    count<T extends LocationImageCountArgs>(
      args?: Subset<T, LocationImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LocationImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LocationImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LocationImageAggregateArgs>(args: Subset<T, LocationImageAggregateArgs>): Prisma.PrismaPromise<GetLocationImageAggregateType<T>>

    /**
     * Group by LocationImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LocationImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LocationImageGroupByArgs['orderBy'] }
        : { orderBy?: LocationImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LocationImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLocationImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LocationImage model
   */
  readonly fields: LocationImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LocationImage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LocationImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    location<T extends LocationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LocationDefaultArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LocationImage model
   */ 
  interface LocationImageFieldRefs {
    readonly id: FieldRef<"LocationImage", 'String'>
    readonly locationId: FieldRef<"LocationImage", 'String'>
    readonly url: FieldRef<"LocationImage", 'String'>
    readonly isPrimary: FieldRef<"LocationImage", 'Boolean'>
    readonly width: FieldRef<"LocationImage", 'Int'>
    readonly height: FieldRef<"LocationImage", 'Int'>
    readonly format: FieldRef<"LocationImage", 'String'>
    readonly createdAt: FieldRef<"LocationImage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LocationImage findUnique
   */
  export type LocationImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationImage
     */
    select?: LocationImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationImageInclude<ExtArgs> | null
    /**
     * Filter, which LocationImage to fetch.
     */
    where: LocationImageWhereUniqueInput
  }

  /**
   * LocationImage findUniqueOrThrow
   */
  export type LocationImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationImage
     */
    select?: LocationImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationImageInclude<ExtArgs> | null
    /**
     * Filter, which LocationImage to fetch.
     */
    where: LocationImageWhereUniqueInput
  }

  /**
   * LocationImage findFirst
   */
  export type LocationImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationImage
     */
    select?: LocationImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationImageInclude<ExtArgs> | null
    /**
     * Filter, which LocationImage to fetch.
     */
    where?: LocationImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LocationImages to fetch.
     */
    orderBy?: LocationImageOrderByWithRelationInput | LocationImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LocationImages.
     */
    cursor?: LocationImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LocationImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LocationImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LocationImages.
     */
    distinct?: LocationImageScalarFieldEnum | LocationImageScalarFieldEnum[]
  }

  /**
   * LocationImage findFirstOrThrow
   */
  export type LocationImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationImage
     */
    select?: LocationImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationImageInclude<ExtArgs> | null
    /**
     * Filter, which LocationImage to fetch.
     */
    where?: LocationImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LocationImages to fetch.
     */
    orderBy?: LocationImageOrderByWithRelationInput | LocationImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LocationImages.
     */
    cursor?: LocationImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LocationImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LocationImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LocationImages.
     */
    distinct?: LocationImageScalarFieldEnum | LocationImageScalarFieldEnum[]
  }

  /**
   * LocationImage findMany
   */
  export type LocationImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationImage
     */
    select?: LocationImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationImageInclude<ExtArgs> | null
    /**
     * Filter, which LocationImages to fetch.
     */
    where?: LocationImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LocationImages to fetch.
     */
    orderBy?: LocationImageOrderByWithRelationInput | LocationImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LocationImages.
     */
    cursor?: LocationImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LocationImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LocationImages.
     */
    skip?: number
    distinct?: LocationImageScalarFieldEnum | LocationImageScalarFieldEnum[]
  }

  /**
   * LocationImage create
   */
  export type LocationImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationImage
     */
    select?: LocationImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationImageInclude<ExtArgs> | null
    /**
     * The data needed to create a LocationImage.
     */
    data: XOR<LocationImageCreateInput, LocationImageUncheckedCreateInput>
  }

  /**
   * LocationImage createMany
   */
  export type LocationImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LocationImages.
     */
    data: LocationImageCreateManyInput | LocationImageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LocationImage createManyAndReturn
   */
  export type LocationImageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationImage
     */
    select?: LocationImageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many LocationImages.
     */
    data: LocationImageCreateManyInput | LocationImageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationImageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LocationImage update
   */
  export type LocationImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationImage
     */
    select?: LocationImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationImageInclude<ExtArgs> | null
    /**
     * The data needed to update a LocationImage.
     */
    data: XOR<LocationImageUpdateInput, LocationImageUncheckedUpdateInput>
    /**
     * Choose, which LocationImage to update.
     */
    where: LocationImageWhereUniqueInput
  }

  /**
   * LocationImage updateMany
   */
  export type LocationImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LocationImages.
     */
    data: XOR<LocationImageUpdateManyMutationInput, LocationImageUncheckedUpdateManyInput>
    /**
     * Filter which LocationImages to update
     */
    where?: LocationImageWhereInput
  }

  /**
   * LocationImage upsert
   */
  export type LocationImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationImage
     */
    select?: LocationImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationImageInclude<ExtArgs> | null
    /**
     * The filter to search for the LocationImage to update in case it exists.
     */
    where: LocationImageWhereUniqueInput
    /**
     * In case the LocationImage found by the `where` argument doesn't exist, create a new LocationImage with this data.
     */
    create: XOR<LocationImageCreateInput, LocationImageUncheckedCreateInput>
    /**
     * In case the LocationImage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LocationImageUpdateInput, LocationImageUncheckedUpdateInput>
  }

  /**
   * LocationImage delete
   */
  export type LocationImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationImage
     */
    select?: LocationImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationImageInclude<ExtArgs> | null
    /**
     * Filter which LocationImage to delete.
     */
    where: LocationImageWhereUniqueInput
  }

  /**
   * LocationImage deleteMany
   */
  export type LocationImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LocationImages to delete
     */
    where?: LocationImageWhereInput
  }

  /**
   * LocationImage without action
   */
  export type LocationImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationImage
     */
    select?: LocationImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationImageInclude<ExtArgs> | null
  }


  /**
   * Model GameSession
   */

  export type AggregateGameSession = {
    _count: GameSessionCountAggregateOutputType | null
    _avg: GameSessionAvgAggregateOutputType | null
    _sum: GameSessionSumAggregateOutputType | null
    _min: GameSessionMinAggregateOutputType | null
    _max: GameSessionMaxAggregateOutputType | null
  }

  export type GameSessionAvgAggregateOutputType = {
    totalScore: number | null
  }

  export type GameSessionSumAggregateOutputType = {
    totalScore: number | null
  }

  export type GameSessionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    setId: string | null
    startedAt: Date | null
    completedAt: Date | null
    difficulty: string | null
    totalScore: number | null
    status: string | null
  }

  export type GameSessionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    setId: string | null
    startedAt: Date | null
    completedAt: Date | null
    difficulty: string | null
    totalScore: number | null
    status: string | null
  }

  export type GameSessionCountAggregateOutputType = {
    id: number
    userId: number
    setId: number
    startedAt: number
    completedAt: number
    difficulty: number
    totalScore: number
    status: number
    _all: number
  }


  export type GameSessionAvgAggregateInputType = {
    totalScore?: true
  }

  export type GameSessionSumAggregateInputType = {
    totalScore?: true
  }

  export type GameSessionMinAggregateInputType = {
    id?: true
    userId?: true
    setId?: true
    startedAt?: true
    completedAt?: true
    difficulty?: true
    totalScore?: true
    status?: true
  }

  export type GameSessionMaxAggregateInputType = {
    id?: true
    userId?: true
    setId?: true
    startedAt?: true
    completedAt?: true
    difficulty?: true
    totalScore?: true
    status?: true
  }

  export type GameSessionCountAggregateInputType = {
    id?: true
    userId?: true
    setId?: true
    startedAt?: true
    completedAt?: true
    difficulty?: true
    totalScore?: true
    status?: true
    _all?: true
  }

  export type GameSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameSession to aggregate.
     */
    where?: GameSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameSessions to fetch.
     */
    orderBy?: GameSessionOrderByWithRelationInput | GameSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GameSessions
    **/
    _count?: true | GameSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameSessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameSessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameSessionMaxAggregateInputType
  }

  export type GetGameSessionAggregateType<T extends GameSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateGameSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGameSession[P]>
      : GetScalarType<T[P], AggregateGameSession[P]>
  }




  export type GameSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameSessionWhereInput
    orderBy?: GameSessionOrderByWithAggregationInput | GameSessionOrderByWithAggregationInput[]
    by: GameSessionScalarFieldEnum[] | GameSessionScalarFieldEnum
    having?: GameSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameSessionCountAggregateInputType | true
    _avg?: GameSessionAvgAggregateInputType
    _sum?: GameSessionSumAggregateInputType
    _min?: GameSessionMinAggregateInputType
    _max?: GameSessionMaxAggregateInputType
  }

  export type GameSessionGroupByOutputType = {
    id: string
    userId: string
    setId: string
    startedAt: Date
    completedAt: Date | null
    difficulty: string | null
    totalScore: number
    status: string
    _count: GameSessionCountAggregateOutputType | null
    _avg: GameSessionAvgAggregateOutputType | null
    _sum: GameSessionSumAggregateOutputType | null
    _min: GameSessionMinAggregateOutputType | null
    _max: GameSessionMaxAggregateOutputType | null
  }

  type GetGameSessionGroupByPayload<T extends GameSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameSessionGroupByOutputType[P]>
            : GetScalarType<T[P], GameSessionGroupByOutputType[P]>
        }
      >
    >


  export type GameSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    setId?: boolean
    startedAt?: boolean
    completedAt?: boolean
    difficulty?: boolean
    totalScore?: boolean
    status?: boolean
    set?: boolean | LocationSetDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    guesses?: boolean | GameSession$guessesArgs<ExtArgs>
    _count?: boolean | GameSessionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameSession"]>

  export type GameSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    setId?: boolean
    startedAt?: boolean
    completedAt?: boolean
    difficulty?: boolean
    totalScore?: boolean
    status?: boolean
    set?: boolean | LocationSetDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameSession"]>

  export type GameSessionSelectScalar = {
    id?: boolean
    userId?: boolean
    setId?: boolean
    startedAt?: boolean
    completedAt?: boolean
    difficulty?: boolean
    totalScore?: boolean
    status?: boolean
  }

  export type GameSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    set?: boolean | LocationSetDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    guesses?: boolean | GameSession$guessesArgs<ExtArgs>
    _count?: boolean | GameSessionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GameSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    set?: boolean | LocationSetDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $GameSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GameSession"
    objects: {
      set: Prisma.$LocationSetPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      guesses: Prisma.$GuessPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      setId: string
      startedAt: Date
      completedAt: Date | null
      difficulty: string | null
      totalScore: number
      status: string
    }, ExtArgs["result"]["gameSession"]>
    composites: {}
  }

  type GameSessionGetPayload<S extends boolean | null | undefined | GameSessionDefaultArgs> = $Result.GetResult<Prisma.$GameSessionPayload, S>

  type GameSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GameSessionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GameSessionCountAggregateInputType | true
    }

  export interface GameSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GameSession'], meta: { name: 'GameSession' } }
    /**
     * Find zero or one GameSession that matches the filter.
     * @param {GameSessionFindUniqueArgs} args - Arguments to find a GameSession
     * @example
     * // Get one GameSession
     * const gameSession = await prisma.gameSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GameSessionFindUniqueArgs>(args: SelectSubset<T, GameSessionFindUniqueArgs<ExtArgs>>): Prisma__GameSessionClient<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one GameSession that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GameSessionFindUniqueOrThrowArgs} args - Arguments to find a GameSession
     * @example
     * // Get one GameSession
     * const gameSession = await prisma.gameSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GameSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, GameSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GameSessionClient<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first GameSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameSessionFindFirstArgs} args - Arguments to find a GameSession
     * @example
     * // Get one GameSession
     * const gameSession = await prisma.gameSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GameSessionFindFirstArgs>(args?: SelectSubset<T, GameSessionFindFirstArgs<ExtArgs>>): Prisma__GameSessionClient<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first GameSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameSessionFindFirstOrThrowArgs} args - Arguments to find a GameSession
     * @example
     * // Get one GameSession
     * const gameSession = await prisma.gameSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GameSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, GameSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__GameSessionClient<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more GameSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GameSessions
     * const gameSessions = await prisma.gameSession.findMany()
     * 
     * // Get first 10 GameSessions
     * const gameSessions = await prisma.gameSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameSessionWithIdOnly = await prisma.gameSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GameSessionFindManyArgs>(args?: SelectSubset<T, GameSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a GameSession.
     * @param {GameSessionCreateArgs} args - Arguments to create a GameSession.
     * @example
     * // Create one GameSession
     * const GameSession = await prisma.gameSession.create({
     *   data: {
     *     // ... data to create a GameSession
     *   }
     * })
     * 
     */
    create<T extends GameSessionCreateArgs>(args: SelectSubset<T, GameSessionCreateArgs<ExtArgs>>): Prisma__GameSessionClient<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many GameSessions.
     * @param {GameSessionCreateManyArgs} args - Arguments to create many GameSessions.
     * @example
     * // Create many GameSessions
     * const gameSession = await prisma.gameSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GameSessionCreateManyArgs>(args?: SelectSubset<T, GameSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GameSessions and returns the data saved in the database.
     * @param {GameSessionCreateManyAndReturnArgs} args - Arguments to create many GameSessions.
     * @example
     * // Create many GameSessions
     * const gameSession = await prisma.gameSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GameSessions and only return the `id`
     * const gameSessionWithIdOnly = await prisma.gameSession.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GameSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, GameSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a GameSession.
     * @param {GameSessionDeleteArgs} args - Arguments to delete one GameSession.
     * @example
     * // Delete one GameSession
     * const GameSession = await prisma.gameSession.delete({
     *   where: {
     *     // ... filter to delete one GameSession
     *   }
     * })
     * 
     */
    delete<T extends GameSessionDeleteArgs>(args: SelectSubset<T, GameSessionDeleteArgs<ExtArgs>>): Prisma__GameSessionClient<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one GameSession.
     * @param {GameSessionUpdateArgs} args - Arguments to update one GameSession.
     * @example
     * // Update one GameSession
     * const gameSession = await prisma.gameSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GameSessionUpdateArgs>(args: SelectSubset<T, GameSessionUpdateArgs<ExtArgs>>): Prisma__GameSessionClient<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more GameSessions.
     * @param {GameSessionDeleteManyArgs} args - Arguments to filter GameSessions to delete.
     * @example
     * // Delete a few GameSessions
     * const { count } = await prisma.gameSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GameSessionDeleteManyArgs>(args?: SelectSubset<T, GameSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GameSessions
     * const gameSession = await prisma.gameSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GameSessionUpdateManyArgs>(args: SelectSubset<T, GameSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GameSession.
     * @param {GameSessionUpsertArgs} args - Arguments to update or create a GameSession.
     * @example
     * // Update or create a GameSession
     * const gameSession = await prisma.gameSession.upsert({
     *   create: {
     *     // ... data to create a GameSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GameSession we want to update
     *   }
     * })
     */
    upsert<T extends GameSessionUpsertArgs>(args: SelectSubset<T, GameSessionUpsertArgs<ExtArgs>>): Prisma__GameSessionClient<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of GameSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameSessionCountArgs} args - Arguments to filter GameSessions to count.
     * @example
     * // Count the number of GameSessions
     * const count = await prisma.gameSession.count({
     *   where: {
     *     // ... the filter for the GameSessions we want to count
     *   }
     * })
    **/
    count<T extends GameSessionCountArgs>(
      args?: Subset<T, GameSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GameSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameSessionAggregateArgs>(args: Subset<T, GameSessionAggregateArgs>): Prisma.PrismaPromise<GetGameSessionAggregateType<T>>

    /**
     * Group by GameSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameSessionGroupByArgs['orderBy'] }
        : { orderBy?: GameSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GameSession model
   */
  readonly fields: GameSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GameSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    set<T extends LocationSetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LocationSetDefaultArgs<ExtArgs>>): Prisma__LocationSetClient<$Result.GetResult<Prisma.$LocationSetPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    guesses<T extends GameSession$guessesArgs<ExtArgs> = {}>(args?: Subset<T, GameSession$guessesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GuessPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GameSession model
   */ 
  interface GameSessionFieldRefs {
    readonly id: FieldRef<"GameSession", 'String'>
    readonly userId: FieldRef<"GameSession", 'String'>
    readonly setId: FieldRef<"GameSession", 'String'>
    readonly startedAt: FieldRef<"GameSession", 'DateTime'>
    readonly completedAt: FieldRef<"GameSession", 'DateTime'>
    readonly difficulty: FieldRef<"GameSession", 'String'>
    readonly totalScore: FieldRef<"GameSession", 'Int'>
    readonly status: FieldRef<"GameSession", 'String'>
  }
    

  // Custom InputTypes
  /**
   * GameSession findUnique
   */
  export type GameSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
    /**
     * Filter, which GameSession to fetch.
     */
    where: GameSessionWhereUniqueInput
  }

  /**
   * GameSession findUniqueOrThrow
   */
  export type GameSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
    /**
     * Filter, which GameSession to fetch.
     */
    where: GameSessionWhereUniqueInput
  }

  /**
   * GameSession findFirst
   */
  export type GameSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
    /**
     * Filter, which GameSession to fetch.
     */
    where?: GameSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameSessions to fetch.
     */
    orderBy?: GameSessionOrderByWithRelationInput | GameSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameSessions.
     */
    cursor?: GameSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameSessions.
     */
    distinct?: GameSessionScalarFieldEnum | GameSessionScalarFieldEnum[]
  }

  /**
   * GameSession findFirstOrThrow
   */
  export type GameSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
    /**
     * Filter, which GameSession to fetch.
     */
    where?: GameSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameSessions to fetch.
     */
    orderBy?: GameSessionOrderByWithRelationInput | GameSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameSessions.
     */
    cursor?: GameSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameSessions.
     */
    distinct?: GameSessionScalarFieldEnum | GameSessionScalarFieldEnum[]
  }

  /**
   * GameSession findMany
   */
  export type GameSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
    /**
     * Filter, which GameSessions to fetch.
     */
    where?: GameSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameSessions to fetch.
     */
    orderBy?: GameSessionOrderByWithRelationInput | GameSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GameSessions.
     */
    cursor?: GameSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameSessions.
     */
    skip?: number
    distinct?: GameSessionScalarFieldEnum | GameSessionScalarFieldEnum[]
  }

  /**
   * GameSession create
   */
  export type GameSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a GameSession.
     */
    data: XOR<GameSessionCreateInput, GameSessionUncheckedCreateInput>
  }

  /**
   * GameSession createMany
   */
  export type GameSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GameSessions.
     */
    data: GameSessionCreateManyInput | GameSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GameSession createManyAndReturn
   */
  export type GameSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many GameSessions.
     */
    data: GameSessionCreateManyInput | GameSessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GameSession update
   */
  export type GameSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a GameSession.
     */
    data: XOR<GameSessionUpdateInput, GameSessionUncheckedUpdateInput>
    /**
     * Choose, which GameSession to update.
     */
    where: GameSessionWhereUniqueInput
  }

  /**
   * GameSession updateMany
   */
  export type GameSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GameSessions.
     */
    data: XOR<GameSessionUpdateManyMutationInput, GameSessionUncheckedUpdateManyInput>
    /**
     * Filter which GameSessions to update
     */
    where?: GameSessionWhereInput
  }

  /**
   * GameSession upsert
   */
  export type GameSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the GameSession to update in case it exists.
     */
    where: GameSessionWhereUniqueInput
    /**
     * In case the GameSession found by the `where` argument doesn't exist, create a new GameSession with this data.
     */
    create: XOR<GameSessionCreateInput, GameSessionUncheckedCreateInput>
    /**
     * In case the GameSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameSessionUpdateInput, GameSessionUncheckedUpdateInput>
  }

  /**
   * GameSession delete
   */
  export type GameSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
    /**
     * Filter which GameSession to delete.
     */
    where: GameSessionWhereUniqueInput
  }

  /**
   * GameSession deleteMany
   */
  export type GameSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameSessions to delete
     */
    where?: GameSessionWhereInput
  }

  /**
   * GameSession.guesses
   */
  export type GameSession$guessesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guess
     */
    select?: GuessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuessInclude<ExtArgs> | null
    where?: GuessWhereInput
    orderBy?: GuessOrderByWithRelationInput | GuessOrderByWithRelationInput[]
    cursor?: GuessWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GuessScalarFieldEnum | GuessScalarFieldEnum[]
  }

  /**
   * GameSession without action
   */
  export type GameSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameSession
     */
    select?: GameSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameSessionInclude<ExtArgs> | null
  }


  /**
   * Model Guess
   */

  export type AggregateGuess = {
    _count: GuessCountAggregateOutputType | null
    _avg: GuessAvgAggregateOutputType | null
    _sum: GuessSumAggregateOutputType | null
    _min: GuessMinAggregateOutputType | null
    _max: GuessMaxAggregateOutputType | null
  }

  export type GuessAvgAggregateOutputType = {
    guessedLat: Decimal | null
    guessedLng: Decimal | null
    distanceKm: Decimal | null
    score: number | null
    timeTaken: number | null
    hintsUsed: number | null
  }

  export type GuessSumAggregateOutputType = {
    guessedLat: Decimal | null
    guessedLng: Decimal | null
    distanceKm: Decimal | null
    score: number | null
    timeTaken: number | null
    hintsUsed: number | null
  }

  export type GuessMinAggregateOutputType = {
    id: string | null
    sessionId: string | null
    locationId: string | null
    guessedLat: Decimal | null
    guessedLng: Decimal | null
    distanceKm: Decimal | null
    score: number | null
    timeTaken: number | null
    hintsUsed: number | null
    createdAt: Date | null
  }

  export type GuessMaxAggregateOutputType = {
    id: string | null
    sessionId: string | null
    locationId: string | null
    guessedLat: Decimal | null
    guessedLng: Decimal | null
    distanceKm: Decimal | null
    score: number | null
    timeTaken: number | null
    hintsUsed: number | null
    createdAt: Date | null
  }

  export type GuessCountAggregateOutputType = {
    id: number
    sessionId: number
    locationId: number
    guessedLat: number
    guessedLng: number
    distanceKm: number
    score: number
    timeTaken: number
    hintsUsed: number
    createdAt: number
    _all: number
  }


  export type GuessAvgAggregateInputType = {
    guessedLat?: true
    guessedLng?: true
    distanceKm?: true
    score?: true
    timeTaken?: true
    hintsUsed?: true
  }

  export type GuessSumAggregateInputType = {
    guessedLat?: true
    guessedLng?: true
    distanceKm?: true
    score?: true
    timeTaken?: true
    hintsUsed?: true
  }

  export type GuessMinAggregateInputType = {
    id?: true
    sessionId?: true
    locationId?: true
    guessedLat?: true
    guessedLng?: true
    distanceKm?: true
    score?: true
    timeTaken?: true
    hintsUsed?: true
    createdAt?: true
  }

  export type GuessMaxAggregateInputType = {
    id?: true
    sessionId?: true
    locationId?: true
    guessedLat?: true
    guessedLng?: true
    distanceKm?: true
    score?: true
    timeTaken?: true
    hintsUsed?: true
    createdAt?: true
  }

  export type GuessCountAggregateInputType = {
    id?: true
    sessionId?: true
    locationId?: true
    guessedLat?: true
    guessedLng?: true
    distanceKm?: true
    score?: true
    timeTaken?: true
    hintsUsed?: true
    createdAt?: true
    _all?: true
  }

  export type GuessAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Guess to aggregate.
     */
    where?: GuessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Guesses to fetch.
     */
    orderBy?: GuessOrderByWithRelationInput | GuessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GuessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Guesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Guesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Guesses
    **/
    _count?: true | GuessCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GuessAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GuessSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GuessMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GuessMaxAggregateInputType
  }

  export type GetGuessAggregateType<T extends GuessAggregateArgs> = {
        [P in keyof T & keyof AggregateGuess]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGuess[P]>
      : GetScalarType<T[P], AggregateGuess[P]>
  }




  export type GuessGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GuessWhereInput
    orderBy?: GuessOrderByWithAggregationInput | GuessOrderByWithAggregationInput[]
    by: GuessScalarFieldEnum[] | GuessScalarFieldEnum
    having?: GuessScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GuessCountAggregateInputType | true
    _avg?: GuessAvgAggregateInputType
    _sum?: GuessSumAggregateInputType
    _min?: GuessMinAggregateInputType
    _max?: GuessMaxAggregateInputType
  }

  export type GuessGroupByOutputType = {
    id: string
    sessionId: string
    locationId: string
    guessedLat: Decimal
    guessedLng: Decimal
    distanceKm: Decimal
    score: number
    timeTaken: number
    hintsUsed: number
    createdAt: Date
    _count: GuessCountAggregateOutputType | null
    _avg: GuessAvgAggregateOutputType | null
    _sum: GuessSumAggregateOutputType | null
    _min: GuessMinAggregateOutputType | null
    _max: GuessMaxAggregateOutputType | null
  }

  type GetGuessGroupByPayload<T extends GuessGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GuessGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GuessGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GuessGroupByOutputType[P]>
            : GetScalarType<T[P], GuessGroupByOutputType[P]>
        }
      >
    >


  export type GuessSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    locationId?: boolean
    guessedLat?: boolean
    guessedLng?: boolean
    distanceKm?: boolean
    score?: boolean
    timeTaken?: boolean
    hintsUsed?: boolean
    createdAt?: boolean
    location?: boolean | LocationDefaultArgs<ExtArgs>
    session?: boolean | GameSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["guess"]>

  export type GuessSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    locationId?: boolean
    guessedLat?: boolean
    guessedLng?: boolean
    distanceKm?: boolean
    score?: boolean
    timeTaken?: boolean
    hintsUsed?: boolean
    createdAt?: boolean
    location?: boolean | LocationDefaultArgs<ExtArgs>
    session?: boolean | GameSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["guess"]>

  export type GuessSelectScalar = {
    id?: boolean
    sessionId?: boolean
    locationId?: boolean
    guessedLat?: boolean
    guessedLng?: boolean
    distanceKm?: boolean
    score?: boolean
    timeTaken?: boolean
    hintsUsed?: boolean
    createdAt?: boolean
  }

  export type GuessInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    location?: boolean | LocationDefaultArgs<ExtArgs>
    session?: boolean | GameSessionDefaultArgs<ExtArgs>
  }
  export type GuessIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    location?: boolean | LocationDefaultArgs<ExtArgs>
    session?: boolean | GameSessionDefaultArgs<ExtArgs>
  }

  export type $GuessPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Guess"
    objects: {
      location: Prisma.$LocationPayload<ExtArgs>
      session: Prisma.$GameSessionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionId: string
      locationId: string
      guessedLat: Prisma.Decimal
      guessedLng: Prisma.Decimal
      distanceKm: Prisma.Decimal
      score: number
      timeTaken: number
      hintsUsed: number
      createdAt: Date
    }, ExtArgs["result"]["guess"]>
    composites: {}
  }

  type GuessGetPayload<S extends boolean | null | undefined | GuessDefaultArgs> = $Result.GetResult<Prisma.$GuessPayload, S>

  type GuessCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GuessFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GuessCountAggregateInputType | true
    }

  export interface GuessDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Guess'], meta: { name: 'Guess' } }
    /**
     * Find zero or one Guess that matches the filter.
     * @param {GuessFindUniqueArgs} args - Arguments to find a Guess
     * @example
     * // Get one Guess
     * const guess = await prisma.guess.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GuessFindUniqueArgs>(args: SelectSubset<T, GuessFindUniqueArgs<ExtArgs>>): Prisma__GuessClient<$Result.GetResult<Prisma.$GuessPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Guess that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GuessFindUniqueOrThrowArgs} args - Arguments to find a Guess
     * @example
     * // Get one Guess
     * const guess = await prisma.guess.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GuessFindUniqueOrThrowArgs>(args: SelectSubset<T, GuessFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GuessClient<$Result.GetResult<Prisma.$GuessPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Guess that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuessFindFirstArgs} args - Arguments to find a Guess
     * @example
     * // Get one Guess
     * const guess = await prisma.guess.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GuessFindFirstArgs>(args?: SelectSubset<T, GuessFindFirstArgs<ExtArgs>>): Prisma__GuessClient<$Result.GetResult<Prisma.$GuessPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Guess that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuessFindFirstOrThrowArgs} args - Arguments to find a Guess
     * @example
     * // Get one Guess
     * const guess = await prisma.guess.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GuessFindFirstOrThrowArgs>(args?: SelectSubset<T, GuessFindFirstOrThrowArgs<ExtArgs>>): Prisma__GuessClient<$Result.GetResult<Prisma.$GuessPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Guesses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuessFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Guesses
     * const guesses = await prisma.guess.findMany()
     * 
     * // Get first 10 Guesses
     * const guesses = await prisma.guess.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const guessWithIdOnly = await prisma.guess.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GuessFindManyArgs>(args?: SelectSubset<T, GuessFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GuessPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Guess.
     * @param {GuessCreateArgs} args - Arguments to create a Guess.
     * @example
     * // Create one Guess
     * const Guess = await prisma.guess.create({
     *   data: {
     *     // ... data to create a Guess
     *   }
     * })
     * 
     */
    create<T extends GuessCreateArgs>(args: SelectSubset<T, GuessCreateArgs<ExtArgs>>): Prisma__GuessClient<$Result.GetResult<Prisma.$GuessPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Guesses.
     * @param {GuessCreateManyArgs} args - Arguments to create many Guesses.
     * @example
     * // Create many Guesses
     * const guess = await prisma.guess.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GuessCreateManyArgs>(args?: SelectSubset<T, GuessCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Guesses and returns the data saved in the database.
     * @param {GuessCreateManyAndReturnArgs} args - Arguments to create many Guesses.
     * @example
     * // Create many Guesses
     * const guess = await prisma.guess.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Guesses and only return the `id`
     * const guessWithIdOnly = await prisma.guess.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GuessCreateManyAndReturnArgs>(args?: SelectSubset<T, GuessCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GuessPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Guess.
     * @param {GuessDeleteArgs} args - Arguments to delete one Guess.
     * @example
     * // Delete one Guess
     * const Guess = await prisma.guess.delete({
     *   where: {
     *     // ... filter to delete one Guess
     *   }
     * })
     * 
     */
    delete<T extends GuessDeleteArgs>(args: SelectSubset<T, GuessDeleteArgs<ExtArgs>>): Prisma__GuessClient<$Result.GetResult<Prisma.$GuessPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Guess.
     * @param {GuessUpdateArgs} args - Arguments to update one Guess.
     * @example
     * // Update one Guess
     * const guess = await prisma.guess.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GuessUpdateArgs>(args: SelectSubset<T, GuessUpdateArgs<ExtArgs>>): Prisma__GuessClient<$Result.GetResult<Prisma.$GuessPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Guesses.
     * @param {GuessDeleteManyArgs} args - Arguments to filter Guesses to delete.
     * @example
     * // Delete a few Guesses
     * const { count } = await prisma.guess.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GuessDeleteManyArgs>(args?: SelectSubset<T, GuessDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Guesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuessUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Guesses
     * const guess = await prisma.guess.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GuessUpdateManyArgs>(args: SelectSubset<T, GuessUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Guess.
     * @param {GuessUpsertArgs} args - Arguments to update or create a Guess.
     * @example
     * // Update or create a Guess
     * const guess = await prisma.guess.upsert({
     *   create: {
     *     // ... data to create a Guess
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Guess we want to update
     *   }
     * })
     */
    upsert<T extends GuessUpsertArgs>(args: SelectSubset<T, GuessUpsertArgs<ExtArgs>>): Prisma__GuessClient<$Result.GetResult<Prisma.$GuessPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Guesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuessCountArgs} args - Arguments to filter Guesses to count.
     * @example
     * // Count the number of Guesses
     * const count = await prisma.guess.count({
     *   where: {
     *     // ... the filter for the Guesses we want to count
     *   }
     * })
    **/
    count<T extends GuessCountArgs>(
      args?: Subset<T, GuessCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GuessCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Guess.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuessAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GuessAggregateArgs>(args: Subset<T, GuessAggregateArgs>): Prisma.PrismaPromise<GetGuessAggregateType<T>>

    /**
     * Group by Guess.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuessGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GuessGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GuessGroupByArgs['orderBy'] }
        : { orderBy?: GuessGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GuessGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGuessGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Guess model
   */
  readonly fields: GuessFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Guess.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GuessClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    location<T extends LocationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LocationDefaultArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    session<T extends GameSessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GameSessionDefaultArgs<ExtArgs>>): Prisma__GameSessionClient<$Result.GetResult<Prisma.$GameSessionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Guess model
   */ 
  interface GuessFieldRefs {
    readonly id: FieldRef<"Guess", 'String'>
    readonly sessionId: FieldRef<"Guess", 'String'>
    readonly locationId: FieldRef<"Guess", 'String'>
    readonly guessedLat: FieldRef<"Guess", 'Decimal'>
    readonly guessedLng: FieldRef<"Guess", 'Decimal'>
    readonly distanceKm: FieldRef<"Guess", 'Decimal'>
    readonly score: FieldRef<"Guess", 'Int'>
    readonly timeTaken: FieldRef<"Guess", 'Int'>
    readonly hintsUsed: FieldRef<"Guess", 'Int'>
    readonly createdAt: FieldRef<"Guess", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Guess findUnique
   */
  export type GuessFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guess
     */
    select?: GuessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuessInclude<ExtArgs> | null
    /**
     * Filter, which Guess to fetch.
     */
    where: GuessWhereUniqueInput
  }

  /**
   * Guess findUniqueOrThrow
   */
  export type GuessFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guess
     */
    select?: GuessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuessInclude<ExtArgs> | null
    /**
     * Filter, which Guess to fetch.
     */
    where: GuessWhereUniqueInput
  }

  /**
   * Guess findFirst
   */
  export type GuessFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guess
     */
    select?: GuessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuessInclude<ExtArgs> | null
    /**
     * Filter, which Guess to fetch.
     */
    where?: GuessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Guesses to fetch.
     */
    orderBy?: GuessOrderByWithRelationInput | GuessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Guesses.
     */
    cursor?: GuessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Guesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Guesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Guesses.
     */
    distinct?: GuessScalarFieldEnum | GuessScalarFieldEnum[]
  }

  /**
   * Guess findFirstOrThrow
   */
  export type GuessFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guess
     */
    select?: GuessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuessInclude<ExtArgs> | null
    /**
     * Filter, which Guess to fetch.
     */
    where?: GuessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Guesses to fetch.
     */
    orderBy?: GuessOrderByWithRelationInput | GuessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Guesses.
     */
    cursor?: GuessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Guesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Guesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Guesses.
     */
    distinct?: GuessScalarFieldEnum | GuessScalarFieldEnum[]
  }

  /**
   * Guess findMany
   */
  export type GuessFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guess
     */
    select?: GuessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuessInclude<ExtArgs> | null
    /**
     * Filter, which Guesses to fetch.
     */
    where?: GuessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Guesses to fetch.
     */
    orderBy?: GuessOrderByWithRelationInput | GuessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Guesses.
     */
    cursor?: GuessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Guesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Guesses.
     */
    skip?: number
    distinct?: GuessScalarFieldEnum | GuessScalarFieldEnum[]
  }

  /**
   * Guess create
   */
  export type GuessCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guess
     */
    select?: GuessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuessInclude<ExtArgs> | null
    /**
     * The data needed to create a Guess.
     */
    data: XOR<GuessCreateInput, GuessUncheckedCreateInput>
  }

  /**
   * Guess createMany
   */
  export type GuessCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Guesses.
     */
    data: GuessCreateManyInput | GuessCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Guess createManyAndReturn
   */
  export type GuessCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guess
     */
    select?: GuessSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Guesses.
     */
    data: GuessCreateManyInput | GuessCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuessIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Guess update
   */
  export type GuessUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guess
     */
    select?: GuessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuessInclude<ExtArgs> | null
    /**
     * The data needed to update a Guess.
     */
    data: XOR<GuessUpdateInput, GuessUncheckedUpdateInput>
    /**
     * Choose, which Guess to update.
     */
    where: GuessWhereUniqueInput
  }

  /**
   * Guess updateMany
   */
  export type GuessUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Guesses.
     */
    data: XOR<GuessUpdateManyMutationInput, GuessUncheckedUpdateManyInput>
    /**
     * Filter which Guesses to update
     */
    where?: GuessWhereInput
  }

  /**
   * Guess upsert
   */
  export type GuessUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guess
     */
    select?: GuessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuessInclude<ExtArgs> | null
    /**
     * The filter to search for the Guess to update in case it exists.
     */
    where: GuessWhereUniqueInput
    /**
     * In case the Guess found by the `where` argument doesn't exist, create a new Guess with this data.
     */
    create: XOR<GuessCreateInput, GuessUncheckedCreateInput>
    /**
     * In case the Guess was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GuessUpdateInput, GuessUncheckedUpdateInput>
  }

  /**
   * Guess delete
   */
  export type GuessDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guess
     */
    select?: GuessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuessInclude<ExtArgs> | null
    /**
     * Filter which Guess to delete.
     */
    where: GuessWhereUniqueInput
  }

  /**
   * Guess deleteMany
   */
  export type GuessDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Guesses to delete
     */
    where?: GuessWhereInput
  }

  /**
   * Guess without action
   */
  export type GuessDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guess
     */
    select?: GuessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuessInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    passwordHash: 'passwordHash',
    displayName: 'displayName',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    lastLogin: 'lastLogin',
    isVerified: 'isVerified',
    role: 'role'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserPreferenceScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    difficulty: 'difficulty',
    theme: 'theme',
    notificationSettings: 'notificationSettings',
    uiPreferences: 'uiPreferences',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserPreferenceScalarFieldEnum = (typeof UserPreferenceScalarFieldEnum)[keyof typeof UserPreferenceScalarFieldEnum]


  export const LocationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    latitude: 'latitude',
    longitude: 'longitude',
    difficulty: 'difficulty',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LocationScalarFieldEnum = (typeof LocationScalarFieldEnum)[keyof typeof LocationScalarFieldEnum]


  export const LocationSetScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    difficulty: 'difficulty',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LocationSetScalarFieldEnum = (typeof LocationSetScalarFieldEnum)[keyof typeof LocationSetScalarFieldEnum]


  export const LocationSetMappingScalarFieldEnum: {
    locationId: 'locationId',
    setId: 'setId',
    position: 'position'
  };

  export type LocationSetMappingScalarFieldEnum = (typeof LocationSetMappingScalarFieldEnum)[keyof typeof LocationSetMappingScalarFieldEnum]


  export const LocationImageScalarFieldEnum: {
    id: 'id',
    locationId: 'locationId',
    url: 'url',
    isPrimary: 'isPrimary',
    width: 'width',
    height: 'height',
    format: 'format',
    createdAt: 'createdAt'
  };

  export type LocationImageScalarFieldEnum = (typeof LocationImageScalarFieldEnum)[keyof typeof LocationImageScalarFieldEnum]


  export const GameSessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    setId: 'setId',
    startedAt: 'startedAt',
    completedAt: 'completedAt',
    difficulty: 'difficulty',
    totalScore: 'totalScore',
    status: 'status'
  };

  export type GameSessionScalarFieldEnum = (typeof GameSessionScalarFieldEnum)[keyof typeof GameSessionScalarFieldEnum]


  export const GuessScalarFieldEnum: {
    id: 'id',
    sessionId: 'sessionId',
    locationId: 'locationId',
    guessedLat: 'guessedLat',
    guessedLng: 'guessedLng',
    distanceKm: 'distanceKm',
    score: 'score',
    timeTaken: 'timeTaken',
    hintsUsed: 'hintsUsed',
    createdAt: 'createdAt'
  };

  export type GuessScalarFieldEnum = (typeof GuessScalarFieldEnum)[keyof typeof GuessScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    displayName?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    isVerified?: BoolFilter<"User"> | boolean
    role?: StringFilter<"User"> | string
    gameSessions?: GameSessionListRelationFilter
    preferences?: XOR<UserPreferenceNullableRelationFilter, UserPreferenceWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    displayName?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    isVerified?: SortOrder
    role?: SortOrder
    gameSessions?: GameSessionOrderByRelationAggregateInput
    preferences?: UserPreferenceOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    passwordHash?: StringFilter<"User"> | string
    displayName?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    isVerified?: BoolFilter<"User"> | boolean
    role?: StringFilter<"User"> | string
    gameSessions?: GameSessionListRelationFilter
    preferences?: XOR<UserPreferenceNullableRelationFilter, UserPreferenceWhereInput> | null
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    displayName?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    isVerified?: SortOrder
    role?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    displayName?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    lastLogin?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    isVerified?: BoolWithAggregatesFilter<"User"> | boolean
    role?: StringWithAggregatesFilter<"User"> | string
  }

  export type UserPreferenceWhereInput = {
    AND?: UserPreferenceWhereInput | UserPreferenceWhereInput[]
    OR?: UserPreferenceWhereInput[]
    NOT?: UserPreferenceWhereInput | UserPreferenceWhereInput[]
    id?: StringFilter<"UserPreference"> | string
    userId?: StringFilter<"UserPreference"> | string
    difficulty?: StringNullableFilter<"UserPreference"> | string | null
    theme?: StringNullableFilter<"UserPreference"> | string | null
    notificationSettings?: JsonNullableFilter<"UserPreference">
    uiPreferences?: JsonNullableFilter<"UserPreference">
    createdAt?: DateTimeFilter<"UserPreference"> | Date | string
    updatedAt?: DateTimeFilter<"UserPreference"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserPreferenceOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    difficulty?: SortOrderInput | SortOrder
    theme?: SortOrderInput | SortOrder
    notificationSettings?: SortOrderInput | SortOrder
    uiPreferences?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserPreferenceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: UserPreferenceWhereInput | UserPreferenceWhereInput[]
    OR?: UserPreferenceWhereInput[]
    NOT?: UserPreferenceWhereInput | UserPreferenceWhereInput[]
    difficulty?: StringNullableFilter<"UserPreference"> | string | null
    theme?: StringNullableFilter<"UserPreference"> | string | null
    notificationSettings?: JsonNullableFilter<"UserPreference">
    uiPreferences?: JsonNullableFilter<"UserPreference">
    createdAt?: DateTimeFilter<"UserPreference"> | Date | string
    updatedAt?: DateTimeFilter<"UserPreference"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type UserPreferenceOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    difficulty?: SortOrderInput | SortOrder
    theme?: SortOrderInput | SortOrder
    notificationSettings?: SortOrderInput | SortOrder
    uiPreferences?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserPreferenceCountOrderByAggregateInput
    _max?: UserPreferenceMaxOrderByAggregateInput
    _min?: UserPreferenceMinOrderByAggregateInput
  }

  export type UserPreferenceScalarWhereWithAggregatesInput = {
    AND?: UserPreferenceScalarWhereWithAggregatesInput | UserPreferenceScalarWhereWithAggregatesInput[]
    OR?: UserPreferenceScalarWhereWithAggregatesInput[]
    NOT?: UserPreferenceScalarWhereWithAggregatesInput | UserPreferenceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserPreference"> | string
    userId?: StringWithAggregatesFilter<"UserPreference"> | string
    difficulty?: StringNullableWithAggregatesFilter<"UserPreference"> | string | null
    theme?: StringNullableWithAggregatesFilter<"UserPreference"> | string | null
    notificationSettings?: JsonNullableWithAggregatesFilter<"UserPreference">
    uiPreferences?: JsonNullableWithAggregatesFilter<"UserPreference">
    createdAt?: DateTimeWithAggregatesFilter<"UserPreference"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserPreference"> | Date | string
  }

  export type LocationWhereInput = {
    AND?: LocationWhereInput | LocationWhereInput[]
    OR?: LocationWhereInput[]
    NOT?: LocationWhereInput | LocationWhereInput[]
    id?: StringFilter<"Location"> | string
    name?: StringFilter<"Location"> | string
    description?: StringNullableFilter<"Location"> | string | null
    latitude?: DecimalFilter<"Location"> | Decimal | DecimalJsLike | number | string
    longitude?: DecimalFilter<"Location"> | Decimal | DecimalJsLike | number | string
    difficulty?: IntNullableFilter<"Location"> | number | null
    createdAt?: DateTimeFilter<"Location"> | Date | string
    updatedAt?: DateTimeFilter<"Location"> | Date | string
    guesses?: GuessListRelationFilter
    images?: LocationImageListRelationFilter
    sets?: LocationSetMappingListRelationFilter
  }

  export type LocationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    difficulty?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    guesses?: GuessOrderByRelationAggregateInput
    images?: LocationImageOrderByRelationAggregateInput
    sets?: LocationSetMappingOrderByRelationAggregateInput
  }

  export type LocationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LocationWhereInput | LocationWhereInput[]
    OR?: LocationWhereInput[]
    NOT?: LocationWhereInput | LocationWhereInput[]
    name?: StringFilter<"Location"> | string
    description?: StringNullableFilter<"Location"> | string | null
    latitude?: DecimalFilter<"Location"> | Decimal | DecimalJsLike | number | string
    longitude?: DecimalFilter<"Location"> | Decimal | DecimalJsLike | number | string
    difficulty?: IntNullableFilter<"Location"> | number | null
    createdAt?: DateTimeFilter<"Location"> | Date | string
    updatedAt?: DateTimeFilter<"Location"> | Date | string
    guesses?: GuessListRelationFilter
    images?: LocationImageListRelationFilter
    sets?: LocationSetMappingListRelationFilter
  }, "id">

  export type LocationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    difficulty?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LocationCountOrderByAggregateInput
    _avg?: LocationAvgOrderByAggregateInput
    _max?: LocationMaxOrderByAggregateInput
    _min?: LocationMinOrderByAggregateInput
    _sum?: LocationSumOrderByAggregateInput
  }

  export type LocationScalarWhereWithAggregatesInput = {
    AND?: LocationScalarWhereWithAggregatesInput | LocationScalarWhereWithAggregatesInput[]
    OR?: LocationScalarWhereWithAggregatesInput[]
    NOT?: LocationScalarWhereWithAggregatesInput | LocationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Location"> | string
    name?: StringWithAggregatesFilter<"Location"> | string
    description?: StringNullableWithAggregatesFilter<"Location"> | string | null
    latitude?: DecimalWithAggregatesFilter<"Location"> | Decimal | DecimalJsLike | number | string
    longitude?: DecimalWithAggregatesFilter<"Location"> | Decimal | DecimalJsLike | number | string
    difficulty?: IntNullableWithAggregatesFilter<"Location"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Location"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Location"> | Date | string
  }

  export type LocationSetWhereInput = {
    AND?: LocationSetWhereInput | LocationSetWhereInput[]
    OR?: LocationSetWhereInput[]
    NOT?: LocationSetWhereInput | LocationSetWhereInput[]
    id?: StringFilter<"LocationSet"> | string
    name?: StringFilter<"LocationSet"> | string
    description?: StringNullableFilter<"LocationSet"> | string | null
    difficulty?: IntNullableFilter<"LocationSet"> | number | null
    createdAt?: DateTimeFilter<"LocationSet"> | Date | string
    updatedAt?: DateTimeFilter<"LocationSet"> | Date | string
    gameSessions?: GameSessionListRelationFilter
    locations?: LocationSetMappingListRelationFilter
  }

  export type LocationSetOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    difficulty?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    gameSessions?: GameSessionOrderByRelationAggregateInput
    locations?: LocationSetMappingOrderByRelationAggregateInput
  }

  export type LocationSetWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LocationSetWhereInput | LocationSetWhereInput[]
    OR?: LocationSetWhereInput[]
    NOT?: LocationSetWhereInput | LocationSetWhereInput[]
    name?: StringFilter<"LocationSet"> | string
    description?: StringNullableFilter<"LocationSet"> | string | null
    difficulty?: IntNullableFilter<"LocationSet"> | number | null
    createdAt?: DateTimeFilter<"LocationSet"> | Date | string
    updatedAt?: DateTimeFilter<"LocationSet"> | Date | string
    gameSessions?: GameSessionListRelationFilter
    locations?: LocationSetMappingListRelationFilter
  }, "id">

  export type LocationSetOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    difficulty?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LocationSetCountOrderByAggregateInput
    _avg?: LocationSetAvgOrderByAggregateInput
    _max?: LocationSetMaxOrderByAggregateInput
    _min?: LocationSetMinOrderByAggregateInput
    _sum?: LocationSetSumOrderByAggregateInput
  }

  export type LocationSetScalarWhereWithAggregatesInput = {
    AND?: LocationSetScalarWhereWithAggregatesInput | LocationSetScalarWhereWithAggregatesInput[]
    OR?: LocationSetScalarWhereWithAggregatesInput[]
    NOT?: LocationSetScalarWhereWithAggregatesInput | LocationSetScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LocationSet"> | string
    name?: StringWithAggregatesFilter<"LocationSet"> | string
    description?: StringNullableWithAggregatesFilter<"LocationSet"> | string | null
    difficulty?: IntNullableWithAggregatesFilter<"LocationSet"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"LocationSet"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"LocationSet"> | Date | string
  }

  export type LocationSetMappingWhereInput = {
    AND?: LocationSetMappingWhereInput | LocationSetMappingWhereInput[]
    OR?: LocationSetMappingWhereInput[]
    NOT?: LocationSetMappingWhereInput | LocationSetMappingWhereInput[]
    locationId?: StringFilter<"LocationSetMapping"> | string
    setId?: StringFilter<"LocationSetMapping"> | string
    position?: IntFilter<"LocationSetMapping"> | number
    location?: XOR<LocationRelationFilter, LocationWhereInput>
    set?: XOR<LocationSetRelationFilter, LocationSetWhereInput>
  }

  export type LocationSetMappingOrderByWithRelationInput = {
    locationId?: SortOrder
    setId?: SortOrder
    position?: SortOrder
    location?: LocationOrderByWithRelationInput
    set?: LocationSetOrderByWithRelationInput
  }

  export type LocationSetMappingWhereUniqueInput = Prisma.AtLeast<{
    locationId_setId?: LocationSetMappingLocationIdSetIdCompoundUniqueInput
    AND?: LocationSetMappingWhereInput | LocationSetMappingWhereInput[]
    OR?: LocationSetMappingWhereInput[]
    NOT?: LocationSetMappingWhereInput | LocationSetMappingWhereInput[]
    locationId?: StringFilter<"LocationSetMapping"> | string
    setId?: StringFilter<"LocationSetMapping"> | string
    position?: IntFilter<"LocationSetMapping"> | number
    location?: XOR<LocationRelationFilter, LocationWhereInput>
    set?: XOR<LocationSetRelationFilter, LocationSetWhereInput>
  }, "locationId_setId">

  export type LocationSetMappingOrderByWithAggregationInput = {
    locationId?: SortOrder
    setId?: SortOrder
    position?: SortOrder
    _count?: LocationSetMappingCountOrderByAggregateInput
    _avg?: LocationSetMappingAvgOrderByAggregateInput
    _max?: LocationSetMappingMaxOrderByAggregateInput
    _min?: LocationSetMappingMinOrderByAggregateInput
    _sum?: LocationSetMappingSumOrderByAggregateInput
  }

  export type LocationSetMappingScalarWhereWithAggregatesInput = {
    AND?: LocationSetMappingScalarWhereWithAggregatesInput | LocationSetMappingScalarWhereWithAggregatesInput[]
    OR?: LocationSetMappingScalarWhereWithAggregatesInput[]
    NOT?: LocationSetMappingScalarWhereWithAggregatesInput | LocationSetMappingScalarWhereWithAggregatesInput[]
    locationId?: StringWithAggregatesFilter<"LocationSetMapping"> | string
    setId?: StringWithAggregatesFilter<"LocationSetMapping"> | string
    position?: IntWithAggregatesFilter<"LocationSetMapping"> | number
  }

  export type LocationImageWhereInput = {
    AND?: LocationImageWhereInput | LocationImageWhereInput[]
    OR?: LocationImageWhereInput[]
    NOT?: LocationImageWhereInput | LocationImageWhereInput[]
    id?: StringFilter<"LocationImage"> | string
    locationId?: StringFilter<"LocationImage"> | string
    url?: StringFilter<"LocationImage"> | string
    isPrimary?: BoolFilter<"LocationImage"> | boolean
    width?: IntNullableFilter<"LocationImage"> | number | null
    height?: IntNullableFilter<"LocationImage"> | number | null
    format?: StringNullableFilter<"LocationImage"> | string | null
    createdAt?: DateTimeFilter<"LocationImage"> | Date | string
    location?: XOR<LocationRelationFilter, LocationWhereInput>
  }

  export type LocationImageOrderByWithRelationInput = {
    id?: SortOrder
    locationId?: SortOrder
    url?: SortOrder
    isPrimary?: SortOrder
    width?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    format?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    location?: LocationOrderByWithRelationInput
  }

  export type LocationImageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LocationImageWhereInput | LocationImageWhereInput[]
    OR?: LocationImageWhereInput[]
    NOT?: LocationImageWhereInput | LocationImageWhereInput[]
    locationId?: StringFilter<"LocationImage"> | string
    url?: StringFilter<"LocationImage"> | string
    isPrimary?: BoolFilter<"LocationImage"> | boolean
    width?: IntNullableFilter<"LocationImage"> | number | null
    height?: IntNullableFilter<"LocationImage"> | number | null
    format?: StringNullableFilter<"LocationImage"> | string | null
    createdAt?: DateTimeFilter<"LocationImage"> | Date | string
    location?: XOR<LocationRelationFilter, LocationWhereInput>
  }, "id">

  export type LocationImageOrderByWithAggregationInput = {
    id?: SortOrder
    locationId?: SortOrder
    url?: SortOrder
    isPrimary?: SortOrder
    width?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    format?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: LocationImageCountOrderByAggregateInput
    _avg?: LocationImageAvgOrderByAggregateInput
    _max?: LocationImageMaxOrderByAggregateInput
    _min?: LocationImageMinOrderByAggregateInput
    _sum?: LocationImageSumOrderByAggregateInput
  }

  export type LocationImageScalarWhereWithAggregatesInput = {
    AND?: LocationImageScalarWhereWithAggregatesInput | LocationImageScalarWhereWithAggregatesInput[]
    OR?: LocationImageScalarWhereWithAggregatesInput[]
    NOT?: LocationImageScalarWhereWithAggregatesInput | LocationImageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LocationImage"> | string
    locationId?: StringWithAggregatesFilter<"LocationImage"> | string
    url?: StringWithAggregatesFilter<"LocationImage"> | string
    isPrimary?: BoolWithAggregatesFilter<"LocationImage"> | boolean
    width?: IntNullableWithAggregatesFilter<"LocationImage"> | number | null
    height?: IntNullableWithAggregatesFilter<"LocationImage"> | number | null
    format?: StringNullableWithAggregatesFilter<"LocationImage"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"LocationImage"> | Date | string
  }

  export type GameSessionWhereInput = {
    AND?: GameSessionWhereInput | GameSessionWhereInput[]
    OR?: GameSessionWhereInput[]
    NOT?: GameSessionWhereInput | GameSessionWhereInput[]
    id?: StringFilter<"GameSession"> | string
    userId?: StringFilter<"GameSession"> | string
    setId?: StringFilter<"GameSession"> | string
    startedAt?: DateTimeFilter<"GameSession"> | Date | string
    completedAt?: DateTimeNullableFilter<"GameSession"> | Date | string | null
    difficulty?: StringNullableFilter<"GameSession"> | string | null
    totalScore?: IntFilter<"GameSession"> | number
    status?: StringFilter<"GameSession"> | string
    set?: XOR<LocationSetRelationFilter, LocationSetWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    guesses?: GuessListRelationFilter
  }

  export type GameSessionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    setId?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    difficulty?: SortOrderInput | SortOrder
    totalScore?: SortOrder
    status?: SortOrder
    set?: LocationSetOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    guesses?: GuessOrderByRelationAggregateInput
  }

  export type GameSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GameSessionWhereInput | GameSessionWhereInput[]
    OR?: GameSessionWhereInput[]
    NOT?: GameSessionWhereInput | GameSessionWhereInput[]
    userId?: StringFilter<"GameSession"> | string
    setId?: StringFilter<"GameSession"> | string
    startedAt?: DateTimeFilter<"GameSession"> | Date | string
    completedAt?: DateTimeNullableFilter<"GameSession"> | Date | string | null
    difficulty?: StringNullableFilter<"GameSession"> | string | null
    totalScore?: IntFilter<"GameSession"> | number
    status?: StringFilter<"GameSession"> | string
    set?: XOR<LocationSetRelationFilter, LocationSetWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    guesses?: GuessListRelationFilter
  }, "id">

  export type GameSessionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    setId?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    difficulty?: SortOrderInput | SortOrder
    totalScore?: SortOrder
    status?: SortOrder
    _count?: GameSessionCountOrderByAggregateInput
    _avg?: GameSessionAvgOrderByAggregateInput
    _max?: GameSessionMaxOrderByAggregateInput
    _min?: GameSessionMinOrderByAggregateInput
    _sum?: GameSessionSumOrderByAggregateInput
  }

  export type GameSessionScalarWhereWithAggregatesInput = {
    AND?: GameSessionScalarWhereWithAggregatesInput | GameSessionScalarWhereWithAggregatesInput[]
    OR?: GameSessionScalarWhereWithAggregatesInput[]
    NOT?: GameSessionScalarWhereWithAggregatesInput | GameSessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GameSession"> | string
    userId?: StringWithAggregatesFilter<"GameSession"> | string
    setId?: StringWithAggregatesFilter<"GameSession"> | string
    startedAt?: DateTimeWithAggregatesFilter<"GameSession"> | Date | string
    completedAt?: DateTimeNullableWithAggregatesFilter<"GameSession"> | Date | string | null
    difficulty?: StringNullableWithAggregatesFilter<"GameSession"> | string | null
    totalScore?: IntWithAggregatesFilter<"GameSession"> | number
    status?: StringWithAggregatesFilter<"GameSession"> | string
  }

  export type GuessWhereInput = {
    AND?: GuessWhereInput | GuessWhereInput[]
    OR?: GuessWhereInput[]
    NOT?: GuessWhereInput | GuessWhereInput[]
    id?: StringFilter<"Guess"> | string
    sessionId?: StringFilter<"Guess"> | string
    locationId?: StringFilter<"Guess"> | string
    guessedLat?: DecimalFilter<"Guess"> | Decimal | DecimalJsLike | number | string
    guessedLng?: DecimalFilter<"Guess"> | Decimal | DecimalJsLike | number | string
    distanceKm?: DecimalFilter<"Guess"> | Decimal | DecimalJsLike | number | string
    score?: IntFilter<"Guess"> | number
    timeTaken?: IntFilter<"Guess"> | number
    hintsUsed?: IntFilter<"Guess"> | number
    createdAt?: DateTimeFilter<"Guess"> | Date | string
    location?: XOR<LocationRelationFilter, LocationWhereInput>
    session?: XOR<GameSessionRelationFilter, GameSessionWhereInput>
  }

  export type GuessOrderByWithRelationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    locationId?: SortOrder
    guessedLat?: SortOrder
    guessedLng?: SortOrder
    distanceKm?: SortOrder
    score?: SortOrder
    timeTaken?: SortOrder
    hintsUsed?: SortOrder
    createdAt?: SortOrder
    location?: LocationOrderByWithRelationInput
    session?: GameSessionOrderByWithRelationInput
  }

  export type GuessWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GuessWhereInput | GuessWhereInput[]
    OR?: GuessWhereInput[]
    NOT?: GuessWhereInput | GuessWhereInput[]
    sessionId?: StringFilter<"Guess"> | string
    locationId?: StringFilter<"Guess"> | string
    guessedLat?: DecimalFilter<"Guess"> | Decimal | DecimalJsLike | number | string
    guessedLng?: DecimalFilter<"Guess"> | Decimal | DecimalJsLike | number | string
    distanceKm?: DecimalFilter<"Guess"> | Decimal | DecimalJsLike | number | string
    score?: IntFilter<"Guess"> | number
    timeTaken?: IntFilter<"Guess"> | number
    hintsUsed?: IntFilter<"Guess"> | number
    createdAt?: DateTimeFilter<"Guess"> | Date | string
    location?: XOR<LocationRelationFilter, LocationWhereInput>
    session?: XOR<GameSessionRelationFilter, GameSessionWhereInput>
  }, "id">

  export type GuessOrderByWithAggregationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    locationId?: SortOrder
    guessedLat?: SortOrder
    guessedLng?: SortOrder
    distanceKm?: SortOrder
    score?: SortOrder
    timeTaken?: SortOrder
    hintsUsed?: SortOrder
    createdAt?: SortOrder
    _count?: GuessCountOrderByAggregateInput
    _avg?: GuessAvgOrderByAggregateInput
    _max?: GuessMaxOrderByAggregateInput
    _min?: GuessMinOrderByAggregateInput
    _sum?: GuessSumOrderByAggregateInput
  }

  export type GuessScalarWhereWithAggregatesInput = {
    AND?: GuessScalarWhereWithAggregatesInput | GuessScalarWhereWithAggregatesInput[]
    OR?: GuessScalarWhereWithAggregatesInput[]
    NOT?: GuessScalarWhereWithAggregatesInput | GuessScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Guess"> | string
    sessionId?: StringWithAggregatesFilter<"Guess"> | string
    locationId?: StringWithAggregatesFilter<"Guess"> | string
    guessedLat?: DecimalWithAggregatesFilter<"Guess"> | Decimal | DecimalJsLike | number | string
    guessedLng?: DecimalWithAggregatesFilter<"Guess"> | Decimal | DecimalJsLike | number | string
    distanceKm?: DecimalWithAggregatesFilter<"Guess"> | Decimal | DecimalJsLike | number | string
    score?: IntWithAggregatesFilter<"Guess"> | number
    timeTaken?: IntWithAggregatesFilter<"Guess"> | number
    hintsUsed?: IntWithAggregatesFilter<"Guess"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Guess"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    passwordHash: string
    displayName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    isVerified?: boolean
    role?: string
    gameSessions?: GameSessionCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    passwordHash: string
    displayName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    isVerified?: boolean
    role?: string
    gameSessions?: GameSessionUncheckedCreateNestedManyWithoutUserInput
    preferences?: UserPreferenceUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    gameSessions?: GameSessionUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    gameSessions?: GameSessionUncheckedUpdateManyWithoutUserNestedInput
    preferences?: UserPreferenceUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    passwordHash: string
    displayName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    isVerified?: boolean
    role?: string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
  }

  export type UserPreferenceCreateInput = {
    id?: string
    difficulty?: string | null
    theme?: string | null
    notificationSettings?: NullableJsonNullValueInput | InputJsonValue
    uiPreferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPreferencesInput
  }

  export type UserPreferenceUncheckedCreateInput = {
    id?: string
    userId: string
    difficulty?: string | null
    theme?: string | null
    notificationSettings?: NullableJsonNullValueInput | InputJsonValue
    uiPreferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPreferenceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    notificationSettings?: NullableJsonNullValueInput | InputJsonValue
    uiPreferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPreferencesNestedInput
  }

  export type UserPreferenceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    notificationSettings?: NullableJsonNullValueInput | InputJsonValue
    uiPreferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPreferenceCreateManyInput = {
    id?: string
    userId: string
    difficulty?: string | null
    theme?: string | null
    notificationSettings?: NullableJsonNullValueInput | InputJsonValue
    uiPreferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPreferenceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    notificationSettings?: NullableJsonNullValueInput | InputJsonValue
    uiPreferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPreferenceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    notificationSettings?: NullableJsonNullValueInput | InputJsonValue
    uiPreferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationCreateInput = {
    id?: string
    name: string
    description?: string | null
    latitude: Decimal | DecimalJsLike | number | string
    longitude: Decimal | DecimalJsLike | number | string
    difficulty?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    guesses?: GuessCreateNestedManyWithoutLocationInput
    images?: LocationImageCreateNestedManyWithoutLocationInput
    sets?: LocationSetMappingCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    latitude: Decimal | DecimalJsLike | number | string
    longitude: Decimal | DecimalJsLike | number | string
    difficulty?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    guesses?: GuessUncheckedCreateNestedManyWithoutLocationInput
    images?: LocationImageUncheckedCreateNestedManyWithoutLocationInput
    sets?: LocationSetMappingUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    longitude?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    guesses?: GuessUpdateManyWithoutLocationNestedInput
    images?: LocationImageUpdateManyWithoutLocationNestedInput
    sets?: LocationSetMappingUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    longitude?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    guesses?: GuessUncheckedUpdateManyWithoutLocationNestedInput
    images?: LocationImageUncheckedUpdateManyWithoutLocationNestedInput
    sets?: LocationSetMappingUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type LocationCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    latitude: Decimal | DecimalJsLike | number | string
    longitude: Decimal | DecimalJsLike | number | string
    difficulty?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LocationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    longitude?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    longitude?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationSetCreateInput = {
    id?: string
    name: string
    description?: string | null
    difficulty?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    gameSessions?: GameSessionCreateNestedManyWithoutSetInput
    locations?: LocationSetMappingCreateNestedManyWithoutSetInput
  }

  export type LocationSetUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    difficulty?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    gameSessions?: GameSessionUncheckedCreateNestedManyWithoutSetInput
    locations?: LocationSetMappingUncheckedCreateNestedManyWithoutSetInput
  }

  export type LocationSetUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameSessions?: GameSessionUpdateManyWithoutSetNestedInput
    locations?: LocationSetMappingUpdateManyWithoutSetNestedInput
  }

  export type LocationSetUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameSessions?: GameSessionUncheckedUpdateManyWithoutSetNestedInput
    locations?: LocationSetMappingUncheckedUpdateManyWithoutSetNestedInput
  }

  export type LocationSetCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    difficulty?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LocationSetUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationSetUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationSetMappingCreateInput = {
    position: number
    location: LocationCreateNestedOneWithoutSetsInput
    set: LocationSetCreateNestedOneWithoutLocationsInput
  }

  export type LocationSetMappingUncheckedCreateInput = {
    locationId: string
    setId: string
    position: number
  }

  export type LocationSetMappingUpdateInput = {
    position?: IntFieldUpdateOperationsInput | number
    location?: LocationUpdateOneRequiredWithoutSetsNestedInput
    set?: LocationSetUpdateOneRequiredWithoutLocationsNestedInput
  }

  export type LocationSetMappingUncheckedUpdateInput = {
    locationId?: StringFieldUpdateOperationsInput | string
    setId?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
  }

  export type LocationSetMappingCreateManyInput = {
    locationId: string
    setId: string
    position: number
  }

  export type LocationSetMappingUpdateManyMutationInput = {
    position?: IntFieldUpdateOperationsInput | number
  }

  export type LocationSetMappingUncheckedUpdateManyInput = {
    locationId?: StringFieldUpdateOperationsInput | string
    setId?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
  }

  export type LocationImageCreateInput = {
    id?: string
    url: string
    isPrimary?: boolean
    width?: number | null
    height?: number | null
    format?: string | null
    createdAt?: Date | string
    location: LocationCreateNestedOneWithoutImagesInput
  }

  export type LocationImageUncheckedCreateInput = {
    id?: string
    locationId: string
    url: string
    isPrimary?: boolean
    width?: number | null
    height?: number | null
    format?: string | null
    createdAt?: Date | string
  }

  export type LocationImageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: LocationUpdateOneRequiredWithoutImagesNestedInput
  }

  export type LocationImageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationImageCreateManyInput = {
    id?: string
    locationId: string
    url: string
    isPrimary?: boolean
    width?: number | null
    height?: number | null
    format?: string | null
    createdAt?: Date | string
  }

  export type LocationImageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationImageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameSessionCreateInput = {
    id?: string
    startedAt?: Date | string
    completedAt?: Date | string | null
    difficulty?: string | null
    totalScore?: number
    status?: string
    set: LocationSetCreateNestedOneWithoutGameSessionsInput
    user: UserCreateNestedOneWithoutGameSessionsInput
    guesses?: GuessCreateNestedManyWithoutSessionInput
  }

  export type GameSessionUncheckedCreateInput = {
    id?: string
    userId: string
    setId: string
    startedAt?: Date | string
    completedAt?: Date | string | null
    difficulty?: string | null
    totalScore?: number
    status?: string
    guesses?: GuessUncheckedCreateNestedManyWithoutSessionInput
  }

  export type GameSessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    totalScore?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    set?: LocationSetUpdateOneRequiredWithoutGameSessionsNestedInput
    user?: UserUpdateOneRequiredWithoutGameSessionsNestedInput
    guesses?: GuessUpdateManyWithoutSessionNestedInput
  }

  export type GameSessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    setId?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    totalScore?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    guesses?: GuessUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type GameSessionCreateManyInput = {
    id?: string
    userId: string
    setId: string
    startedAt?: Date | string
    completedAt?: Date | string | null
    difficulty?: string | null
    totalScore?: number
    status?: string
  }

  export type GameSessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    totalScore?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type GameSessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    setId?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    totalScore?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type GuessCreateInput = {
    id?: string
    guessedLat: Decimal | DecimalJsLike | number | string
    guessedLng: Decimal | DecimalJsLike | number | string
    distanceKm: Decimal | DecimalJsLike | number | string
    score: number
    timeTaken: number
    hintsUsed?: number
    createdAt?: Date | string
    location: LocationCreateNestedOneWithoutGuessesInput
    session: GameSessionCreateNestedOneWithoutGuessesInput
  }

  export type GuessUncheckedCreateInput = {
    id?: string
    sessionId: string
    locationId: string
    guessedLat: Decimal | DecimalJsLike | number | string
    guessedLng: Decimal | DecimalJsLike | number | string
    distanceKm: Decimal | DecimalJsLike | number | string
    score: number
    timeTaken: number
    hintsUsed?: number
    createdAt?: Date | string
  }

  export type GuessUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    guessedLat?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    guessedLng?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    distanceKm?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    score?: IntFieldUpdateOperationsInput | number
    timeTaken?: IntFieldUpdateOperationsInput | number
    hintsUsed?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: LocationUpdateOneRequiredWithoutGuessesNestedInput
    session?: GameSessionUpdateOneRequiredWithoutGuessesNestedInput
  }

  export type GuessUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    guessedLat?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    guessedLng?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    distanceKm?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    score?: IntFieldUpdateOperationsInput | number
    timeTaken?: IntFieldUpdateOperationsInput | number
    hintsUsed?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GuessCreateManyInput = {
    id?: string
    sessionId: string
    locationId: string
    guessedLat: Decimal | DecimalJsLike | number | string
    guessedLng: Decimal | DecimalJsLike | number | string
    distanceKm: Decimal | DecimalJsLike | number | string
    score: number
    timeTaken: number
    hintsUsed?: number
    createdAt?: Date | string
  }

  export type GuessUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    guessedLat?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    guessedLng?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    distanceKm?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    score?: IntFieldUpdateOperationsInput | number
    timeTaken?: IntFieldUpdateOperationsInput | number
    hintsUsed?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GuessUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    guessedLat?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    guessedLng?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    distanceKm?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    score?: IntFieldUpdateOperationsInput | number
    timeTaken?: IntFieldUpdateOperationsInput | number
    hintsUsed?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type GameSessionListRelationFilter = {
    every?: GameSessionWhereInput
    some?: GameSessionWhereInput
    none?: GameSessionWhereInput
  }

  export type UserPreferenceNullableRelationFilter = {
    is?: UserPreferenceWhereInput | null
    isNot?: UserPreferenceWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type GameSessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    displayName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLogin?: SortOrder
    isVerified?: SortOrder
    role?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    displayName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLogin?: SortOrder
    isVerified?: SortOrder
    role?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    displayName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLogin?: SortOrder
    isVerified?: SortOrder
    role?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type UserPreferenceCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    difficulty?: SortOrder
    theme?: SortOrder
    notificationSettings?: SortOrder
    uiPreferences?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserPreferenceMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    difficulty?: SortOrder
    theme?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserPreferenceMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    difficulty?: SortOrder
    theme?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type GuessListRelationFilter = {
    every?: GuessWhereInput
    some?: GuessWhereInput
    none?: GuessWhereInput
  }

  export type LocationImageListRelationFilter = {
    every?: LocationImageWhereInput
    some?: LocationImageWhereInput
    none?: LocationImageWhereInput
  }

  export type LocationSetMappingListRelationFilter = {
    every?: LocationSetMappingWhereInput
    some?: LocationSetMappingWhereInput
    none?: LocationSetMappingWhereInput
  }

  export type GuessOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LocationImageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LocationSetMappingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LocationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    difficulty?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LocationAvgOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
    difficulty?: SortOrder
  }

  export type LocationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    difficulty?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LocationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    difficulty?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LocationSumOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
    difficulty?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type LocationSetCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    difficulty?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LocationSetAvgOrderByAggregateInput = {
    difficulty?: SortOrder
  }

  export type LocationSetMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    difficulty?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LocationSetMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    difficulty?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LocationSetSumOrderByAggregateInput = {
    difficulty?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type LocationRelationFilter = {
    is?: LocationWhereInput
    isNot?: LocationWhereInput
  }

  export type LocationSetRelationFilter = {
    is?: LocationSetWhereInput
    isNot?: LocationSetWhereInput
  }

  export type LocationSetMappingLocationIdSetIdCompoundUniqueInput = {
    locationId: string
    setId: string
  }

  export type LocationSetMappingCountOrderByAggregateInput = {
    locationId?: SortOrder
    setId?: SortOrder
    position?: SortOrder
  }

  export type LocationSetMappingAvgOrderByAggregateInput = {
    position?: SortOrder
  }

  export type LocationSetMappingMaxOrderByAggregateInput = {
    locationId?: SortOrder
    setId?: SortOrder
    position?: SortOrder
  }

  export type LocationSetMappingMinOrderByAggregateInput = {
    locationId?: SortOrder
    setId?: SortOrder
    position?: SortOrder
  }

  export type LocationSetMappingSumOrderByAggregateInput = {
    position?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type LocationImageCountOrderByAggregateInput = {
    id?: SortOrder
    locationId?: SortOrder
    url?: SortOrder
    isPrimary?: SortOrder
    width?: SortOrder
    height?: SortOrder
    format?: SortOrder
    createdAt?: SortOrder
  }

  export type LocationImageAvgOrderByAggregateInput = {
    width?: SortOrder
    height?: SortOrder
  }

  export type LocationImageMaxOrderByAggregateInput = {
    id?: SortOrder
    locationId?: SortOrder
    url?: SortOrder
    isPrimary?: SortOrder
    width?: SortOrder
    height?: SortOrder
    format?: SortOrder
    createdAt?: SortOrder
  }

  export type LocationImageMinOrderByAggregateInput = {
    id?: SortOrder
    locationId?: SortOrder
    url?: SortOrder
    isPrimary?: SortOrder
    width?: SortOrder
    height?: SortOrder
    format?: SortOrder
    createdAt?: SortOrder
  }

  export type LocationImageSumOrderByAggregateInput = {
    width?: SortOrder
    height?: SortOrder
  }

  export type GameSessionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    setId?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    difficulty?: SortOrder
    totalScore?: SortOrder
    status?: SortOrder
  }

  export type GameSessionAvgOrderByAggregateInput = {
    totalScore?: SortOrder
  }

  export type GameSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    setId?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    difficulty?: SortOrder
    totalScore?: SortOrder
    status?: SortOrder
  }

  export type GameSessionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    setId?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    difficulty?: SortOrder
    totalScore?: SortOrder
    status?: SortOrder
  }

  export type GameSessionSumOrderByAggregateInput = {
    totalScore?: SortOrder
  }

  export type GameSessionRelationFilter = {
    is?: GameSessionWhereInput
    isNot?: GameSessionWhereInput
  }

  export type GuessCountOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    locationId?: SortOrder
    guessedLat?: SortOrder
    guessedLng?: SortOrder
    distanceKm?: SortOrder
    score?: SortOrder
    timeTaken?: SortOrder
    hintsUsed?: SortOrder
    createdAt?: SortOrder
  }

  export type GuessAvgOrderByAggregateInput = {
    guessedLat?: SortOrder
    guessedLng?: SortOrder
    distanceKm?: SortOrder
    score?: SortOrder
    timeTaken?: SortOrder
    hintsUsed?: SortOrder
  }

  export type GuessMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    locationId?: SortOrder
    guessedLat?: SortOrder
    guessedLng?: SortOrder
    distanceKm?: SortOrder
    score?: SortOrder
    timeTaken?: SortOrder
    hintsUsed?: SortOrder
    createdAt?: SortOrder
  }

  export type GuessMinOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    locationId?: SortOrder
    guessedLat?: SortOrder
    guessedLng?: SortOrder
    distanceKm?: SortOrder
    score?: SortOrder
    timeTaken?: SortOrder
    hintsUsed?: SortOrder
    createdAt?: SortOrder
  }

  export type GuessSumOrderByAggregateInput = {
    guessedLat?: SortOrder
    guessedLng?: SortOrder
    distanceKm?: SortOrder
    score?: SortOrder
    timeTaken?: SortOrder
    hintsUsed?: SortOrder
  }

  export type GameSessionCreateNestedManyWithoutUserInput = {
    create?: XOR<GameSessionCreateWithoutUserInput, GameSessionUncheckedCreateWithoutUserInput> | GameSessionCreateWithoutUserInput[] | GameSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GameSessionCreateOrConnectWithoutUserInput | GameSessionCreateOrConnectWithoutUserInput[]
    createMany?: GameSessionCreateManyUserInputEnvelope
    connect?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
  }

  export type UserPreferenceCreateNestedOneWithoutUserInput = {
    create?: XOR<UserPreferenceCreateWithoutUserInput, UserPreferenceUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserPreferenceCreateOrConnectWithoutUserInput
    connect?: UserPreferenceWhereUniqueInput
  }

  export type GameSessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<GameSessionCreateWithoutUserInput, GameSessionUncheckedCreateWithoutUserInput> | GameSessionCreateWithoutUserInput[] | GameSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GameSessionCreateOrConnectWithoutUserInput | GameSessionCreateOrConnectWithoutUserInput[]
    createMany?: GameSessionCreateManyUserInputEnvelope
    connect?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
  }

  export type UserPreferenceUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<UserPreferenceCreateWithoutUserInput, UserPreferenceUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserPreferenceCreateOrConnectWithoutUserInput
    connect?: UserPreferenceWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type GameSessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<GameSessionCreateWithoutUserInput, GameSessionUncheckedCreateWithoutUserInput> | GameSessionCreateWithoutUserInput[] | GameSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GameSessionCreateOrConnectWithoutUserInput | GameSessionCreateOrConnectWithoutUserInput[]
    upsert?: GameSessionUpsertWithWhereUniqueWithoutUserInput | GameSessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GameSessionCreateManyUserInputEnvelope
    set?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    disconnect?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    delete?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    connect?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    update?: GameSessionUpdateWithWhereUniqueWithoutUserInput | GameSessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GameSessionUpdateManyWithWhereWithoutUserInput | GameSessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GameSessionScalarWhereInput | GameSessionScalarWhereInput[]
  }

  export type UserPreferenceUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserPreferenceCreateWithoutUserInput, UserPreferenceUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserPreferenceCreateOrConnectWithoutUserInput
    upsert?: UserPreferenceUpsertWithoutUserInput
    disconnect?: UserPreferenceWhereInput | boolean
    delete?: UserPreferenceWhereInput | boolean
    connect?: UserPreferenceWhereUniqueInput
    update?: XOR<XOR<UserPreferenceUpdateToOneWithWhereWithoutUserInput, UserPreferenceUpdateWithoutUserInput>, UserPreferenceUncheckedUpdateWithoutUserInput>
  }

  export type GameSessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<GameSessionCreateWithoutUserInput, GameSessionUncheckedCreateWithoutUserInput> | GameSessionCreateWithoutUserInput[] | GameSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GameSessionCreateOrConnectWithoutUserInput | GameSessionCreateOrConnectWithoutUserInput[]
    upsert?: GameSessionUpsertWithWhereUniqueWithoutUserInput | GameSessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GameSessionCreateManyUserInputEnvelope
    set?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    disconnect?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    delete?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    connect?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    update?: GameSessionUpdateWithWhereUniqueWithoutUserInput | GameSessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GameSessionUpdateManyWithWhereWithoutUserInput | GameSessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GameSessionScalarWhereInput | GameSessionScalarWhereInput[]
  }

  export type UserPreferenceUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserPreferenceCreateWithoutUserInput, UserPreferenceUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserPreferenceCreateOrConnectWithoutUserInput
    upsert?: UserPreferenceUpsertWithoutUserInput
    disconnect?: UserPreferenceWhereInput | boolean
    delete?: UserPreferenceWhereInput | boolean
    connect?: UserPreferenceWhereUniqueInput
    update?: XOR<XOR<UserPreferenceUpdateToOneWithWhereWithoutUserInput, UserPreferenceUpdateWithoutUserInput>, UserPreferenceUncheckedUpdateWithoutUserInput>
  }

  export type UserCreateNestedOneWithoutPreferencesInput = {
    create?: XOR<UserCreateWithoutPreferencesInput, UserUncheckedCreateWithoutPreferencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPreferencesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPreferencesNestedInput = {
    create?: XOR<UserCreateWithoutPreferencesInput, UserUncheckedCreateWithoutPreferencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPreferencesInput
    upsert?: UserUpsertWithoutPreferencesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPreferencesInput, UserUpdateWithoutPreferencesInput>, UserUncheckedUpdateWithoutPreferencesInput>
  }

  export type GuessCreateNestedManyWithoutLocationInput = {
    create?: XOR<GuessCreateWithoutLocationInput, GuessUncheckedCreateWithoutLocationInput> | GuessCreateWithoutLocationInput[] | GuessUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: GuessCreateOrConnectWithoutLocationInput | GuessCreateOrConnectWithoutLocationInput[]
    createMany?: GuessCreateManyLocationInputEnvelope
    connect?: GuessWhereUniqueInput | GuessWhereUniqueInput[]
  }

  export type LocationImageCreateNestedManyWithoutLocationInput = {
    create?: XOR<LocationImageCreateWithoutLocationInput, LocationImageUncheckedCreateWithoutLocationInput> | LocationImageCreateWithoutLocationInput[] | LocationImageUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: LocationImageCreateOrConnectWithoutLocationInput | LocationImageCreateOrConnectWithoutLocationInput[]
    createMany?: LocationImageCreateManyLocationInputEnvelope
    connect?: LocationImageWhereUniqueInput | LocationImageWhereUniqueInput[]
  }

  export type LocationSetMappingCreateNestedManyWithoutLocationInput = {
    create?: XOR<LocationSetMappingCreateWithoutLocationInput, LocationSetMappingUncheckedCreateWithoutLocationInput> | LocationSetMappingCreateWithoutLocationInput[] | LocationSetMappingUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: LocationSetMappingCreateOrConnectWithoutLocationInput | LocationSetMappingCreateOrConnectWithoutLocationInput[]
    createMany?: LocationSetMappingCreateManyLocationInputEnvelope
    connect?: LocationSetMappingWhereUniqueInput | LocationSetMappingWhereUniqueInput[]
  }

  export type GuessUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<GuessCreateWithoutLocationInput, GuessUncheckedCreateWithoutLocationInput> | GuessCreateWithoutLocationInput[] | GuessUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: GuessCreateOrConnectWithoutLocationInput | GuessCreateOrConnectWithoutLocationInput[]
    createMany?: GuessCreateManyLocationInputEnvelope
    connect?: GuessWhereUniqueInput | GuessWhereUniqueInput[]
  }

  export type LocationImageUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<LocationImageCreateWithoutLocationInput, LocationImageUncheckedCreateWithoutLocationInput> | LocationImageCreateWithoutLocationInput[] | LocationImageUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: LocationImageCreateOrConnectWithoutLocationInput | LocationImageCreateOrConnectWithoutLocationInput[]
    createMany?: LocationImageCreateManyLocationInputEnvelope
    connect?: LocationImageWhereUniqueInput | LocationImageWhereUniqueInput[]
  }

  export type LocationSetMappingUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<LocationSetMappingCreateWithoutLocationInput, LocationSetMappingUncheckedCreateWithoutLocationInput> | LocationSetMappingCreateWithoutLocationInput[] | LocationSetMappingUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: LocationSetMappingCreateOrConnectWithoutLocationInput | LocationSetMappingCreateOrConnectWithoutLocationInput[]
    createMany?: LocationSetMappingCreateManyLocationInputEnvelope
    connect?: LocationSetMappingWhereUniqueInput | LocationSetMappingWhereUniqueInput[]
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type GuessUpdateManyWithoutLocationNestedInput = {
    create?: XOR<GuessCreateWithoutLocationInput, GuessUncheckedCreateWithoutLocationInput> | GuessCreateWithoutLocationInput[] | GuessUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: GuessCreateOrConnectWithoutLocationInput | GuessCreateOrConnectWithoutLocationInput[]
    upsert?: GuessUpsertWithWhereUniqueWithoutLocationInput | GuessUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: GuessCreateManyLocationInputEnvelope
    set?: GuessWhereUniqueInput | GuessWhereUniqueInput[]
    disconnect?: GuessWhereUniqueInput | GuessWhereUniqueInput[]
    delete?: GuessWhereUniqueInput | GuessWhereUniqueInput[]
    connect?: GuessWhereUniqueInput | GuessWhereUniqueInput[]
    update?: GuessUpdateWithWhereUniqueWithoutLocationInput | GuessUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: GuessUpdateManyWithWhereWithoutLocationInput | GuessUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: GuessScalarWhereInput | GuessScalarWhereInput[]
  }

  export type LocationImageUpdateManyWithoutLocationNestedInput = {
    create?: XOR<LocationImageCreateWithoutLocationInput, LocationImageUncheckedCreateWithoutLocationInput> | LocationImageCreateWithoutLocationInput[] | LocationImageUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: LocationImageCreateOrConnectWithoutLocationInput | LocationImageCreateOrConnectWithoutLocationInput[]
    upsert?: LocationImageUpsertWithWhereUniqueWithoutLocationInput | LocationImageUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: LocationImageCreateManyLocationInputEnvelope
    set?: LocationImageWhereUniqueInput | LocationImageWhereUniqueInput[]
    disconnect?: LocationImageWhereUniqueInput | LocationImageWhereUniqueInput[]
    delete?: LocationImageWhereUniqueInput | LocationImageWhereUniqueInput[]
    connect?: LocationImageWhereUniqueInput | LocationImageWhereUniqueInput[]
    update?: LocationImageUpdateWithWhereUniqueWithoutLocationInput | LocationImageUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: LocationImageUpdateManyWithWhereWithoutLocationInput | LocationImageUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: LocationImageScalarWhereInput | LocationImageScalarWhereInput[]
  }

  export type LocationSetMappingUpdateManyWithoutLocationNestedInput = {
    create?: XOR<LocationSetMappingCreateWithoutLocationInput, LocationSetMappingUncheckedCreateWithoutLocationInput> | LocationSetMappingCreateWithoutLocationInput[] | LocationSetMappingUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: LocationSetMappingCreateOrConnectWithoutLocationInput | LocationSetMappingCreateOrConnectWithoutLocationInput[]
    upsert?: LocationSetMappingUpsertWithWhereUniqueWithoutLocationInput | LocationSetMappingUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: LocationSetMappingCreateManyLocationInputEnvelope
    set?: LocationSetMappingWhereUniqueInput | LocationSetMappingWhereUniqueInput[]
    disconnect?: LocationSetMappingWhereUniqueInput | LocationSetMappingWhereUniqueInput[]
    delete?: LocationSetMappingWhereUniqueInput | LocationSetMappingWhereUniqueInput[]
    connect?: LocationSetMappingWhereUniqueInput | LocationSetMappingWhereUniqueInput[]
    update?: LocationSetMappingUpdateWithWhereUniqueWithoutLocationInput | LocationSetMappingUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: LocationSetMappingUpdateManyWithWhereWithoutLocationInput | LocationSetMappingUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: LocationSetMappingScalarWhereInput | LocationSetMappingScalarWhereInput[]
  }

  export type GuessUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<GuessCreateWithoutLocationInput, GuessUncheckedCreateWithoutLocationInput> | GuessCreateWithoutLocationInput[] | GuessUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: GuessCreateOrConnectWithoutLocationInput | GuessCreateOrConnectWithoutLocationInput[]
    upsert?: GuessUpsertWithWhereUniqueWithoutLocationInput | GuessUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: GuessCreateManyLocationInputEnvelope
    set?: GuessWhereUniqueInput | GuessWhereUniqueInput[]
    disconnect?: GuessWhereUniqueInput | GuessWhereUniqueInput[]
    delete?: GuessWhereUniqueInput | GuessWhereUniqueInput[]
    connect?: GuessWhereUniqueInput | GuessWhereUniqueInput[]
    update?: GuessUpdateWithWhereUniqueWithoutLocationInput | GuessUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: GuessUpdateManyWithWhereWithoutLocationInput | GuessUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: GuessScalarWhereInput | GuessScalarWhereInput[]
  }

  export type LocationImageUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<LocationImageCreateWithoutLocationInput, LocationImageUncheckedCreateWithoutLocationInput> | LocationImageCreateWithoutLocationInput[] | LocationImageUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: LocationImageCreateOrConnectWithoutLocationInput | LocationImageCreateOrConnectWithoutLocationInput[]
    upsert?: LocationImageUpsertWithWhereUniqueWithoutLocationInput | LocationImageUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: LocationImageCreateManyLocationInputEnvelope
    set?: LocationImageWhereUniqueInput | LocationImageWhereUniqueInput[]
    disconnect?: LocationImageWhereUniqueInput | LocationImageWhereUniqueInput[]
    delete?: LocationImageWhereUniqueInput | LocationImageWhereUniqueInput[]
    connect?: LocationImageWhereUniqueInput | LocationImageWhereUniqueInput[]
    update?: LocationImageUpdateWithWhereUniqueWithoutLocationInput | LocationImageUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: LocationImageUpdateManyWithWhereWithoutLocationInput | LocationImageUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: LocationImageScalarWhereInput | LocationImageScalarWhereInput[]
  }

  export type LocationSetMappingUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<LocationSetMappingCreateWithoutLocationInput, LocationSetMappingUncheckedCreateWithoutLocationInput> | LocationSetMappingCreateWithoutLocationInput[] | LocationSetMappingUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: LocationSetMappingCreateOrConnectWithoutLocationInput | LocationSetMappingCreateOrConnectWithoutLocationInput[]
    upsert?: LocationSetMappingUpsertWithWhereUniqueWithoutLocationInput | LocationSetMappingUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: LocationSetMappingCreateManyLocationInputEnvelope
    set?: LocationSetMappingWhereUniqueInput | LocationSetMappingWhereUniqueInput[]
    disconnect?: LocationSetMappingWhereUniqueInput | LocationSetMappingWhereUniqueInput[]
    delete?: LocationSetMappingWhereUniqueInput | LocationSetMappingWhereUniqueInput[]
    connect?: LocationSetMappingWhereUniqueInput | LocationSetMappingWhereUniqueInput[]
    update?: LocationSetMappingUpdateWithWhereUniqueWithoutLocationInput | LocationSetMappingUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: LocationSetMappingUpdateManyWithWhereWithoutLocationInput | LocationSetMappingUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: LocationSetMappingScalarWhereInput | LocationSetMappingScalarWhereInput[]
  }

  export type GameSessionCreateNestedManyWithoutSetInput = {
    create?: XOR<GameSessionCreateWithoutSetInput, GameSessionUncheckedCreateWithoutSetInput> | GameSessionCreateWithoutSetInput[] | GameSessionUncheckedCreateWithoutSetInput[]
    connectOrCreate?: GameSessionCreateOrConnectWithoutSetInput | GameSessionCreateOrConnectWithoutSetInput[]
    createMany?: GameSessionCreateManySetInputEnvelope
    connect?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
  }

  export type LocationSetMappingCreateNestedManyWithoutSetInput = {
    create?: XOR<LocationSetMappingCreateWithoutSetInput, LocationSetMappingUncheckedCreateWithoutSetInput> | LocationSetMappingCreateWithoutSetInput[] | LocationSetMappingUncheckedCreateWithoutSetInput[]
    connectOrCreate?: LocationSetMappingCreateOrConnectWithoutSetInput | LocationSetMappingCreateOrConnectWithoutSetInput[]
    createMany?: LocationSetMappingCreateManySetInputEnvelope
    connect?: LocationSetMappingWhereUniqueInput | LocationSetMappingWhereUniqueInput[]
  }

  export type GameSessionUncheckedCreateNestedManyWithoutSetInput = {
    create?: XOR<GameSessionCreateWithoutSetInput, GameSessionUncheckedCreateWithoutSetInput> | GameSessionCreateWithoutSetInput[] | GameSessionUncheckedCreateWithoutSetInput[]
    connectOrCreate?: GameSessionCreateOrConnectWithoutSetInput | GameSessionCreateOrConnectWithoutSetInput[]
    createMany?: GameSessionCreateManySetInputEnvelope
    connect?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
  }

  export type LocationSetMappingUncheckedCreateNestedManyWithoutSetInput = {
    create?: XOR<LocationSetMappingCreateWithoutSetInput, LocationSetMappingUncheckedCreateWithoutSetInput> | LocationSetMappingCreateWithoutSetInput[] | LocationSetMappingUncheckedCreateWithoutSetInput[]
    connectOrCreate?: LocationSetMappingCreateOrConnectWithoutSetInput | LocationSetMappingCreateOrConnectWithoutSetInput[]
    createMany?: LocationSetMappingCreateManySetInputEnvelope
    connect?: LocationSetMappingWhereUniqueInput | LocationSetMappingWhereUniqueInput[]
  }

  export type GameSessionUpdateManyWithoutSetNestedInput = {
    create?: XOR<GameSessionCreateWithoutSetInput, GameSessionUncheckedCreateWithoutSetInput> | GameSessionCreateWithoutSetInput[] | GameSessionUncheckedCreateWithoutSetInput[]
    connectOrCreate?: GameSessionCreateOrConnectWithoutSetInput | GameSessionCreateOrConnectWithoutSetInput[]
    upsert?: GameSessionUpsertWithWhereUniqueWithoutSetInput | GameSessionUpsertWithWhereUniqueWithoutSetInput[]
    createMany?: GameSessionCreateManySetInputEnvelope
    set?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    disconnect?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    delete?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    connect?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    update?: GameSessionUpdateWithWhereUniqueWithoutSetInput | GameSessionUpdateWithWhereUniqueWithoutSetInput[]
    updateMany?: GameSessionUpdateManyWithWhereWithoutSetInput | GameSessionUpdateManyWithWhereWithoutSetInput[]
    deleteMany?: GameSessionScalarWhereInput | GameSessionScalarWhereInput[]
  }

  export type LocationSetMappingUpdateManyWithoutSetNestedInput = {
    create?: XOR<LocationSetMappingCreateWithoutSetInput, LocationSetMappingUncheckedCreateWithoutSetInput> | LocationSetMappingCreateWithoutSetInput[] | LocationSetMappingUncheckedCreateWithoutSetInput[]
    connectOrCreate?: LocationSetMappingCreateOrConnectWithoutSetInput | LocationSetMappingCreateOrConnectWithoutSetInput[]
    upsert?: LocationSetMappingUpsertWithWhereUniqueWithoutSetInput | LocationSetMappingUpsertWithWhereUniqueWithoutSetInput[]
    createMany?: LocationSetMappingCreateManySetInputEnvelope
    set?: LocationSetMappingWhereUniqueInput | LocationSetMappingWhereUniqueInput[]
    disconnect?: LocationSetMappingWhereUniqueInput | LocationSetMappingWhereUniqueInput[]
    delete?: LocationSetMappingWhereUniqueInput | LocationSetMappingWhereUniqueInput[]
    connect?: LocationSetMappingWhereUniqueInput | LocationSetMappingWhereUniqueInput[]
    update?: LocationSetMappingUpdateWithWhereUniqueWithoutSetInput | LocationSetMappingUpdateWithWhereUniqueWithoutSetInput[]
    updateMany?: LocationSetMappingUpdateManyWithWhereWithoutSetInput | LocationSetMappingUpdateManyWithWhereWithoutSetInput[]
    deleteMany?: LocationSetMappingScalarWhereInput | LocationSetMappingScalarWhereInput[]
  }

  export type GameSessionUncheckedUpdateManyWithoutSetNestedInput = {
    create?: XOR<GameSessionCreateWithoutSetInput, GameSessionUncheckedCreateWithoutSetInput> | GameSessionCreateWithoutSetInput[] | GameSessionUncheckedCreateWithoutSetInput[]
    connectOrCreate?: GameSessionCreateOrConnectWithoutSetInput | GameSessionCreateOrConnectWithoutSetInput[]
    upsert?: GameSessionUpsertWithWhereUniqueWithoutSetInput | GameSessionUpsertWithWhereUniqueWithoutSetInput[]
    createMany?: GameSessionCreateManySetInputEnvelope
    set?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    disconnect?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    delete?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    connect?: GameSessionWhereUniqueInput | GameSessionWhereUniqueInput[]
    update?: GameSessionUpdateWithWhereUniqueWithoutSetInput | GameSessionUpdateWithWhereUniqueWithoutSetInput[]
    updateMany?: GameSessionUpdateManyWithWhereWithoutSetInput | GameSessionUpdateManyWithWhereWithoutSetInput[]
    deleteMany?: GameSessionScalarWhereInput | GameSessionScalarWhereInput[]
  }

  export type LocationSetMappingUncheckedUpdateManyWithoutSetNestedInput = {
    create?: XOR<LocationSetMappingCreateWithoutSetInput, LocationSetMappingUncheckedCreateWithoutSetInput> | LocationSetMappingCreateWithoutSetInput[] | LocationSetMappingUncheckedCreateWithoutSetInput[]
    connectOrCreate?: LocationSetMappingCreateOrConnectWithoutSetInput | LocationSetMappingCreateOrConnectWithoutSetInput[]
    upsert?: LocationSetMappingUpsertWithWhereUniqueWithoutSetInput | LocationSetMappingUpsertWithWhereUniqueWithoutSetInput[]
    createMany?: LocationSetMappingCreateManySetInputEnvelope
    set?: LocationSetMappingWhereUniqueInput | LocationSetMappingWhereUniqueInput[]
    disconnect?: LocationSetMappingWhereUniqueInput | LocationSetMappingWhereUniqueInput[]
    delete?: LocationSetMappingWhereUniqueInput | LocationSetMappingWhereUniqueInput[]
    connect?: LocationSetMappingWhereUniqueInput | LocationSetMappingWhereUniqueInput[]
    update?: LocationSetMappingUpdateWithWhereUniqueWithoutSetInput | LocationSetMappingUpdateWithWhereUniqueWithoutSetInput[]
    updateMany?: LocationSetMappingUpdateManyWithWhereWithoutSetInput | LocationSetMappingUpdateManyWithWhereWithoutSetInput[]
    deleteMany?: LocationSetMappingScalarWhereInput | LocationSetMappingScalarWhereInput[]
  }

  export type LocationCreateNestedOneWithoutSetsInput = {
    create?: XOR<LocationCreateWithoutSetsInput, LocationUncheckedCreateWithoutSetsInput>
    connectOrCreate?: LocationCreateOrConnectWithoutSetsInput
    connect?: LocationWhereUniqueInput
  }

  export type LocationSetCreateNestedOneWithoutLocationsInput = {
    create?: XOR<LocationSetCreateWithoutLocationsInput, LocationSetUncheckedCreateWithoutLocationsInput>
    connectOrCreate?: LocationSetCreateOrConnectWithoutLocationsInput
    connect?: LocationSetWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type LocationUpdateOneRequiredWithoutSetsNestedInput = {
    create?: XOR<LocationCreateWithoutSetsInput, LocationUncheckedCreateWithoutSetsInput>
    connectOrCreate?: LocationCreateOrConnectWithoutSetsInput
    upsert?: LocationUpsertWithoutSetsInput
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutSetsInput, LocationUpdateWithoutSetsInput>, LocationUncheckedUpdateWithoutSetsInput>
  }

  export type LocationSetUpdateOneRequiredWithoutLocationsNestedInput = {
    create?: XOR<LocationSetCreateWithoutLocationsInput, LocationSetUncheckedCreateWithoutLocationsInput>
    connectOrCreate?: LocationSetCreateOrConnectWithoutLocationsInput
    upsert?: LocationSetUpsertWithoutLocationsInput
    connect?: LocationSetWhereUniqueInput
    update?: XOR<XOR<LocationSetUpdateToOneWithWhereWithoutLocationsInput, LocationSetUpdateWithoutLocationsInput>, LocationSetUncheckedUpdateWithoutLocationsInput>
  }

  export type LocationCreateNestedOneWithoutImagesInput = {
    create?: XOR<LocationCreateWithoutImagesInput, LocationUncheckedCreateWithoutImagesInput>
    connectOrCreate?: LocationCreateOrConnectWithoutImagesInput
    connect?: LocationWhereUniqueInput
  }

  export type LocationUpdateOneRequiredWithoutImagesNestedInput = {
    create?: XOR<LocationCreateWithoutImagesInput, LocationUncheckedCreateWithoutImagesInput>
    connectOrCreate?: LocationCreateOrConnectWithoutImagesInput
    upsert?: LocationUpsertWithoutImagesInput
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutImagesInput, LocationUpdateWithoutImagesInput>, LocationUncheckedUpdateWithoutImagesInput>
  }

  export type LocationSetCreateNestedOneWithoutGameSessionsInput = {
    create?: XOR<LocationSetCreateWithoutGameSessionsInput, LocationSetUncheckedCreateWithoutGameSessionsInput>
    connectOrCreate?: LocationSetCreateOrConnectWithoutGameSessionsInput
    connect?: LocationSetWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutGameSessionsInput = {
    create?: XOR<UserCreateWithoutGameSessionsInput, UserUncheckedCreateWithoutGameSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGameSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type GuessCreateNestedManyWithoutSessionInput = {
    create?: XOR<GuessCreateWithoutSessionInput, GuessUncheckedCreateWithoutSessionInput> | GuessCreateWithoutSessionInput[] | GuessUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: GuessCreateOrConnectWithoutSessionInput | GuessCreateOrConnectWithoutSessionInput[]
    createMany?: GuessCreateManySessionInputEnvelope
    connect?: GuessWhereUniqueInput | GuessWhereUniqueInput[]
  }

  export type GuessUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<GuessCreateWithoutSessionInput, GuessUncheckedCreateWithoutSessionInput> | GuessCreateWithoutSessionInput[] | GuessUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: GuessCreateOrConnectWithoutSessionInput | GuessCreateOrConnectWithoutSessionInput[]
    createMany?: GuessCreateManySessionInputEnvelope
    connect?: GuessWhereUniqueInput | GuessWhereUniqueInput[]
  }

  export type LocationSetUpdateOneRequiredWithoutGameSessionsNestedInput = {
    create?: XOR<LocationSetCreateWithoutGameSessionsInput, LocationSetUncheckedCreateWithoutGameSessionsInput>
    connectOrCreate?: LocationSetCreateOrConnectWithoutGameSessionsInput
    upsert?: LocationSetUpsertWithoutGameSessionsInput
    connect?: LocationSetWhereUniqueInput
    update?: XOR<XOR<LocationSetUpdateToOneWithWhereWithoutGameSessionsInput, LocationSetUpdateWithoutGameSessionsInput>, LocationSetUncheckedUpdateWithoutGameSessionsInput>
  }

  export type UserUpdateOneRequiredWithoutGameSessionsNestedInput = {
    create?: XOR<UserCreateWithoutGameSessionsInput, UserUncheckedCreateWithoutGameSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGameSessionsInput
    upsert?: UserUpsertWithoutGameSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGameSessionsInput, UserUpdateWithoutGameSessionsInput>, UserUncheckedUpdateWithoutGameSessionsInput>
  }

  export type GuessUpdateManyWithoutSessionNestedInput = {
    create?: XOR<GuessCreateWithoutSessionInput, GuessUncheckedCreateWithoutSessionInput> | GuessCreateWithoutSessionInput[] | GuessUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: GuessCreateOrConnectWithoutSessionInput | GuessCreateOrConnectWithoutSessionInput[]
    upsert?: GuessUpsertWithWhereUniqueWithoutSessionInput | GuessUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: GuessCreateManySessionInputEnvelope
    set?: GuessWhereUniqueInput | GuessWhereUniqueInput[]
    disconnect?: GuessWhereUniqueInput | GuessWhereUniqueInput[]
    delete?: GuessWhereUniqueInput | GuessWhereUniqueInput[]
    connect?: GuessWhereUniqueInput | GuessWhereUniqueInput[]
    update?: GuessUpdateWithWhereUniqueWithoutSessionInput | GuessUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: GuessUpdateManyWithWhereWithoutSessionInput | GuessUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: GuessScalarWhereInput | GuessScalarWhereInput[]
  }

  export type GuessUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<GuessCreateWithoutSessionInput, GuessUncheckedCreateWithoutSessionInput> | GuessCreateWithoutSessionInput[] | GuessUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: GuessCreateOrConnectWithoutSessionInput | GuessCreateOrConnectWithoutSessionInput[]
    upsert?: GuessUpsertWithWhereUniqueWithoutSessionInput | GuessUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: GuessCreateManySessionInputEnvelope
    set?: GuessWhereUniqueInput | GuessWhereUniqueInput[]
    disconnect?: GuessWhereUniqueInput | GuessWhereUniqueInput[]
    delete?: GuessWhereUniqueInput | GuessWhereUniqueInput[]
    connect?: GuessWhereUniqueInput | GuessWhereUniqueInput[]
    update?: GuessUpdateWithWhereUniqueWithoutSessionInput | GuessUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: GuessUpdateManyWithWhereWithoutSessionInput | GuessUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: GuessScalarWhereInput | GuessScalarWhereInput[]
  }

  export type LocationCreateNestedOneWithoutGuessesInput = {
    create?: XOR<LocationCreateWithoutGuessesInput, LocationUncheckedCreateWithoutGuessesInput>
    connectOrCreate?: LocationCreateOrConnectWithoutGuessesInput
    connect?: LocationWhereUniqueInput
  }

  export type GameSessionCreateNestedOneWithoutGuessesInput = {
    create?: XOR<GameSessionCreateWithoutGuessesInput, GameSessionUncheckedCreateWithoutGuessesInput>
    connectOrCreate?: GameSessionCreateOrConnectWithoutGuessesInput
    connect?: GameSessionWhereUniqueInput
  }

  export type LocationUpdateOneRequiredWithoutGuessesNestedInput = {
    create?: XOR<LocationCreateWithoutGuessesInput, LocationUncheckedCreateWithoutGuessesInput>
    connectOrCreate?: LocationCreateOrConnectWithoutGuessesInput
    upsert?: LocationUpsertWithoutGuessesInput
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutGuessesInput, LocationUpdateWithoutGuessesInput>, LocationUncheckedUpdateWithoutGuessesInput>
  }

  export type GameSessionUpdateOneRequiredWithoutGuessesNestedInput = {
    create?: XOR<GameSessionCreateWithoutGuessesInput, GameSessionUncheckedCreateWithoutGuessesInput>
    connectOrCreate?: GameSessionCreateOrConnectWithoutGuessesInput
    upsert?: GameSessionUpsertWithoutGuessesInput
    connect?: GameSessionWhereUniqueInput
    update?: XOR<XOR<GameSessionUpdateToOneWithWhereWithoutGuessesInput, GameSessionUpdateWithoutGuessesInput>, GameSessionUncheckedUpdateWithoutGuessesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type GameSessionCreateWithoutUserInput = {
    id?: string
    startedAt?: Date | string
    completedAt?: Date | string | null
    difficulty?: string | null
    totalScore?: number
    status?: string
    set: LocationSetCreateNestedOneWithoutGameSessionsInput
    guesses?: GuessCreateNestedManyWithoutSessionInput
  }

  export type GameSessionUncheckedCreateWithoutUserInput = {
    id?: string
    setId: string
    startedAt?: Date | string
    completedAt?: Date | string | null
    difficulty?: string | null
    totalScore?: number
    status?: string
    guesses?: GuessUncheckedCreateNestedManyWithoutSessionInput
  }

  export type GameSessionCreateOrConnectWithoutUserInput = {
    where: GameSessionWhereUniqueInput
    create: XOR<GameSessionCreateWithoutUserInput, GameSessionUncheckedCreateWithoutUserInput>
  }

  export type GameSessionCreateManyUserInputEnvelope = {
    data: GameSessionCreateManyUserInput | GameSessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserPreferenceCreateWithoutUserInput = {
    id?: string
    difficulty?: string | null
    theme?: string | null
    notificationSettings?: NullableJsonNullValueInput | InputJsonValue
    uiPreferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPreferenceUncheckedCreateWithoutUserInput = {
    id?: string
    difficulty?: string | null
    theme?: string | null
    notificationSettings?: NullableJsonNullValueInput | InputJsonValue
    uiPreferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPreferenceCreateOrConnectWithoutUserInput = {
    where: UserPreferenceWhereUniqueInput
    create: XOR<UserPreferenceCreateWithoutUserInput, UserPreferenceUncheckedCreateWithoutUserInput>
  }

  export type GameSessionUpsertWithWhereUniqueWithoutUserInput = {
    where: GameSessionWhereUniqueInput
    update: XOR<GameSessionUpdateWithoutUserInput, GameSessionUncheckedUpdateWithoutUserInput>
    create: XOR<GameSessionCreateWithoutUserInput, GameSessionUncheckedCreateWithoutUserInput>
  }

  export type GameSessionUpdateWithWhereUniqueWithoutUserInput = {
    where: GameSessionWhereUniqueInput
    data: XOR<GameSessionUpdateWithoutUserInput, GameSessionUncheckedUpdateWithoutUserInput>
  }

  export type GameSessionUpdateManyWithWhereWithoutUserInput = {
    where: GameSessionScalarWhereInput
    data: XOR<GameSessionUpdateManyMutationInput, GameSessionUncheckedUpdateManyWithoutUserInput>
  }

  export type GameSessionScalarWhereInput = {
    AND?: GameSessionScalarWhereInput | GameSessionScalarWhereInput[]
    OR?: GameSessionScalarWhereInput[]
    NOT?: GameSessionScalarWhereInput | GameSessionScalarWhereInput[]
    id?: StringFilter<"GameSession"> | string
    userId?: StringFilter<"GameSession"> | string
    setId?: StringFilter<"GameSession"> | string
    startedAt?: DateTimeFilter<"GameSession"> | Date | string
    completedAt?: DateTimeNullableFilter<"GameSession"> | Date | string | null
    difficulty?: StringNullableFilter<"GameSession"> | string | null
    totalScore?: IntFilter<"GameSession"> | number
    status?: StringFilter<"GameSession"> | string
  }

  export type UserPreferenceUpsertWithoutUserInput = {
    update: XOR<UserPreferenceUpdateWithoutUserInput, UserPreferenceUncheckedUpdateWithoutUserInput>
    create: XOR<UserPreferenceCreateWithoutUserInput, UserPreferenceUncheckedCreateWithoutUserInput>
    where?: UserPreferenceWhereInput
  }

  export type UserPreferenceUpdateToOneWithWhereWithoutUserInput = {
    where?: UserPreferenceWhereInput
    data: XOR<UserPreferenceUpdateWithoutUserInput, UserPreferenceUncheckedUpdateWithoutUserInput>
  }

  export type UserPreferenceUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    notificationSettings?: NullableJsonNullValueInput | InputJsonValue
    uiPreferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPreferenceUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    notificationSettings?: NullableJsonNullValueInput | InputJsonValue
    uiPreferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutPreferencesInput = {
    id?: string
    email: string
    passwordHash: string
    displayName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    isVerified?: boolean
    role?: string
    gameSessions?: GameSessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPreferencesInput = {
    id?: string
    email: string
    passwordHash: string
    displayName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    isVerified?: boolean
    role?: string
    gameSessions?: GameSessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPreferencesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPreferencesInput, UserUncheckedCreateWithoutPreferencesInput>
  }

  export type UserUpsertWithoutPreferencesInput = {
    update: XOR<UserUpdateWithoutPreferencesInput, UserUncheckedUpdateWithoutPreferencesInput>
    create: XOR<UserCreateWithoutPreferencesInput, UserUncheckedCreateWithoutPreferencesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPreferencesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPreferencesInput, UserUncheckedUpdateWithoutPreferencesInput>
  }

  export type UserUpdateWithoutPreferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    gameSessions?: GameSessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPreferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    gameSessions?: GameSessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GuessCreateWithoutLocationInput = {
    id?: string
    guessedLat: Decimal | DecimalJsLike | number | string
    guessedLng: Decimal | DecimalJsLike | number | string
    distanceKm: Decimal | DecimalJsLike | number | string
    score: number
    timeTaken: number
    hintsUsed?: number
    createdAt?: Date | string
    session: GameSessionCreateNestedOneWithoutGuessesInput
  }

  export type GuessUncheckedCreateWithoutLocationInput = {
    id?: string
    sessionId: string
    guessedLat: Decimal | DecimalJsLike | number | string
    guessedLng: Decimal | DecimalJsLike | number | string
    distanceKm: Decimal | DecimalJsLike | number | string
    score: number
    timeTaken: number
    hintsUsed?: number
    createdAt?: Date | string
  }

  export type GuessCreateOrConnectWithoutLocationInput = {
    where: GuessWhereUniqueInput
    create: XOR<GuessCreateWithoutLocationInput, GuessUncheckedCreateWithoutLocationInput>
  }

  export type GuessCreateManyLocationInputEnvelope = {
    data: GuessCreateManyLocationInput | GuessCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type LocationImageCreateWithoutLocationInput = {
    id?: string
    url: string
    isPrimary?: boolean
    width?: number | null
    height?: number | null
    format?: string | null
    createdAt?: Date | string
  }

  export type LocationImageUncheckedCreateWithoutLocationInput = {
    id?: string
    url: string
    isPrimary?: boolean
    width?: number | null
    height?: number | null
    format?: string | null
    createdAt?: Date | string
  }

  export type LocationImageCreateOrConnectWithoutLocationInput = {
    where: LocationImageWhereUniqueInput
    create: XOR<LocationImageCreateWithoutLocationInput, LocationImageUncheckedCreateWithoutLocationInput>
  }

  export type LocationImageCreateManyLocationInputEnvelope = {
    data: LocationImageCreateManyLocationInput | LocationImageCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type LocationSetMappingCreateWithoutLocationInput = {
    position: number
    set: LocationSetCreateNestedOneWithoutLocationsInput
  }

  export type LocationSetMappingUncheckedCreateWithoutLocationInput = {
    setId: string
    position: number
  }

  export type LocationSetMappingCreateOrConnectWithoutLocationInput = {
    where: LocationSetMappingWhereUniqueInput
    create: XOR<LocationSetMappingCreateWithoutLocationInput, LocationSetMappingUncheckedCreateWithoutLocationInput>
  }

  export type LocationSetMappingCreateManyLocationInputEnvelope = {
    data: LocationSetMappingCreateManyLocationInput | LocationSetMappingCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type GuessUpsertWithWhereUniqueWithoutLocationInput = {
    where: GuessWhereUniqueInput
    update: XOR<GuessUpdateWithoutLocationInput, GuessUncheckedUpdateWithoutLocationInput>
    create: XOR<GuessCreateWithoutLocationInput, GuessUncheckedCreateWithoutLocationInput>
  }

  export type GuessUpdateWithWhereUniqueWithoutLocationInput = {
    where: GuessWhereUniqueInput
    data: XOR<GuessUpdateWithoutLocationInput, GuessUncheckedUpdateWithoutLocationInput>
  }

  export type GuessUpdateManyWithWhereWithoutLocationInput = {
    where: GuessScalarWhereInput
    data: XOR<GuessUpdateManyMutationInput, GuessUncheckedUpdateManyWithoutLocationInput>
  }

  export type GuessScalarWhereInput = {
    AND?: GuessScalarWhereInput | GuessScalarWhereInput[]
    OR?: GuessScalarWhereInput[]
    NOT?: GuessScalarWhereInput | GuessScalarWhereInput[]
    id?: StringFilter<"Guess"> | string
    sessionId?: StringFilter<"Guess"> | string
    locationId?: StringFilter<"Guess"> | string
    guessedLat?: DecimalFilter<"Guess"> | Decimal | DecimalJsLike | number | string
    guessedLng?: DecimalFilter<"Guess"> | Decimal | DecimalJsLike | number | string
    distanceKm?: DecimalFilter<"Guess"> | Decimal | DecimalJsLike | number | string
    score?: IntFilter<"Guess"> | number
    timeTaken?: IntFilter<"Guess"> | number
    hintsUsed?: IntFilter<"Guess"> | number
    createdAt?: DateTimeFilter<"Guess"> | Date | string
  }

  export type LocationImageUpsertWithWhereUniqueWithoutLocationInput = {
    where: LocationImageWhereUniqueInput
    update: XOR<LocationImageUpdateWithoutLocationInput, LocationImageUncheckedUpdateWithoutLocationInput>
    create: XOR<LocationImageCreateWithoutLocationInput, LocationImageUncheckedCreateWithoutLocationInput>
  }

  export type LocationImageUpdateWithWhereUniqueWithoutLocationInput = {
    where: LocationImageWhereUniqueInput
    data: XOR<LocationImageUpdateWithoutLocationInput, LocationImageUncheckedUpdateWithoutLocationInput>
  }

  export type LocationImageUpdateManyWithWhereWithoutLocationInput = {
    where: LocationImageScalarWhereInput
    data: XOR<LocationImageUpdateManyMutationInput, LocationImageUncheckedUpdateManyWithoutLocationInput>
  }

  export type LocationImageScalarWhereInput = {
    AND?: LocationImageScalarWhereInput | LocationImageScalarWhereInput[]
    OR?: LocationImageScalarWhereInput[]
    NOT?: LocationImageScalarWhereInput | LocationImageScalarWhereInput[]
    id?: StringFilter<"LocationImage"> | string
    locationId?: StringFilter<"LocationImage"> | string
    url?: StringFilter<"LocationImage"> | string
    isPrimary?: BoolFilter<"LocationImage"> | boolean
    width?: IntNullableFilter<"LocationImage"> | number | null
    height?: IntNullableFilter<"LocationImage"> | number | null
    format?: StringNullableFilter<"LocationImage"> | string | null
    createdAt?: DateTimeFilter<"LocationImage"> | Date | string
  }

  export type LocationSetMappingUpsertWithWhereUniqueWithoutLocationInput = {
    where: LocationSetMappingWhereUniqueInput
    update: XOR<LocationSetMappingUpdateWithoutLocationInput, LocationSetMappingUncheckedUpdateWithoutLocationInput>
    create: XOR<LocationSetMappingCreateWithoutLocationInput, LocationSetMappingUncheckedCreateWithoutLocationInput>
  }

  export type LocationSetMappingUpdateWithWhereUniqueWithoutLocationInput = {
    where: LocationSetMappingWhereUniqueInput
    data: XOR<LocationSetMappingUpdateWithoutLocationInput, LocationSetMappingUncheckedUpdateWithoutLocationInput>
  }

  export type LocationSetMappingUpdateManyWithWhereWithoutLocationInput = {
    where: LocationSetMappingScalarWhereInput
    data: XOR<LocationSetMappingUpdateManyMutationInput, LocationSetMappingUncheckedUpdateManyWithoutLocationInput>
  }

  export type LocationSetMappingScalarWhereInput = {
    AND?: LocationSetMappingScalarWhereInput | LocationSetMappingScalarWhereInput[]
    OR?: LocationSetMappingScalarWhereInput[]
    NOT?: LocationSetMappingScalarWhereInput | LocationSetMappingScalarWhereInput[]
    locationId?: StringFilter<"LocationSetMapping"> | string
    setId?: StringFilter<"LocationSetMapping"> | string
    position?: IntFilter<"LocationSetMapping"> | number
  }

  export type GameSessionCreateWithoutSetInput = {
    id?: string
    startedAt?: Date | string
    completedAt?: Date | string | null
    difficulty?: string | null
    totalScore?: number
    status?: string
    user: UserCreateNestedOneWithoutGameSessionsInput
    guesses?: GuessCreateNestedManyWithoutSessionInput
  }

  export type GameSessionUncheckedCreateWithoutSetInput = {
    id?: string
    userId: string
    startedAt?: Date | string
    completedAt?: Date | string | null
    difficulty?: string | null
    totalScore?: number
    status?: string
    guesses?: GuessUncheckedCreateNestedManyWithoutSessionInput
  }

  export type GameSessionCreateOrConnectWithoutSetInput = {
    where: GameSessionWhereUniqueInput
    create: XOR<GameSessionCreateWithoutSetInput, GameSessionUncheckedCreateWithoutSetInput>
  }

  export type GameSessionCreateManySetInputEnvelope = {
    data: GameSessionCreateManySetInput | GameSessionCreateManySetInput[]
    skipDuplicates?: boolean
  }

  export type LocationSetMappingCreateWithoutSetInput = {
    position: number
    location: LocationCreateNestedOneWithoutSetsInput
  }

  export type LocationSetMappingUncheckedCreateWithoutSetInput = {
    locationId: string
    position: number
  }

  export type LocationSetMappingCreateOrConnectWithoutSetInput = {
    where: LocationSetMappingWhereUniqueInput
    create: XOR<LocationSetMappingCreateWithoutSetInput, LocationSetMappingUncheckedCreateWithoutSetInput>
  }

  export type LocationSetMappingCreateManySetInputEnvelope = {
    data: LocationSetMappingCreateManySetInput | LocationSetMappingCreateManySetInput[]
    skipDuplicates?: boolean
  }

  export type GameSessionUpsertWithWhereUniqueWithoutSetInput = {
    where: GameSessionWhereUniqueInput
    update: XOR<GameSessionUpdateWithoutSetInput, GameSessionUncheckedUpdateWithoutSetInput>
    create: XOR<GameSessionCreateWithoutSetInput, GameSessionUncheckedCreateWithoutSetInput>
  }

  export type GameSessionUpdateWithWhereUniqueWithoutSetInput = {
    where: GameSessionWhereUniqueInput
    data: XOR<GameSessionUpdateWithoutSetInput, GameSessionUncheckedUpdateWithoutSetInput>
  }

  export type GameSessionUpdateManyWithWhereWithoutSetInput = {
    where: GameSessionScalarWhereInput
    data: XOR<GameSessionUpdateManyMutationInput, GameSessionUncheckedUpdateManyWithoutSetInput>
  }

  export type LocationSetMappingUpsertWithWhereUniqueWithoutSetInput = {
    where: LocationSetMappingWhereUniqueInput
    update: XOR<LocationSetMappingUpdateWithoutSetInput, LocationSetMappingUncheckedUpdateWithoutSetInput>
    create: XOR<LocationSetMappingCreateWithoutSetInput, LocationSetMappingUncheckedCreateWithoutSetInput>
  }

  export type LocationSetMappingUpdateWithWhereUniqueWithoutSetInput = {
    where: LocationSetMappingWhereUniqueInput
    data: XOR<LocationSetMappingUpdateWithoutSetInput, LocationSetMappingUncheckedUpdateWithoutSetInput>
  }

  export type LocationSetMappingUpdateManyWithWhereWithoutSetInput = {
    where: LocationSetMappingScalarWhereInput
    data: XOR<LocationSetMappingUpdateManyMutationInput, LocationSetMappingUncheckedUpdateManyWithoutSetInput>
  }

  export type LocationCreateWithoutSetsInput = {
    id?: string
    name: string
    description?: string | null
    latitude: Decimal | DecimalJsLike | number | string
    longitude: Decimal | DecimalJsLike | number | string
    difficulty?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    guesses?: GuessCreateNestedManyWithoutLocationInput
    images?: LocationImageCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateWithoutSetsInput = {
    id?: string
    name: string
    description?: string | null
    latitude: Decimal | DecimalJsLike | number | string
    longitude: Decimal | DecimalJsLike | number | string
    difficulty?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    guesses?: GuessUncheckedCreateNestedManyWithoutLocationInput
    images?: LocationImageUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationCreateOrConnectWithoutSetsInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutSetsInput, LocationUncheckedCreateWithoutSetsInput>
  }

  export type LocationSetCreateWithoutLocationsInput = {
    id?: string
    name: string
    description?: string | null
    difficulty?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    gameSessions?: GameSessionCreateNestedManyWithoutSetInput
  }

  export type LocationSetUncheckedCreateWithoutLocationsInput = {
    id?: string
    name: string
    description?: string | null
    difficulty?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    gameSessions?: GameSessionUncheckedCreateNestedManyWithoutSetInput
  }

  export type LocationSetCreateOrConnectWithoutLocationsInput = {
    where: LocationSetWhereUniqueInput
    create: XOR<LocationSetCreateWithoutLocationsInput, LocationSetUncheckedCreateWithoutLocationsInput>
  }

  export type LocationUpsertWithoutSetsInput = {
    update: XOR<LocationUpdateWithoutSetsInput, LocationUncheckedUpdateWithoutSetsInput>
    create: XOR<LocationCreateWithoutSetsInput, LocationUncheckedCreateWithoutSetsInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutSetsInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutSetsInput, LocationUncheckedUpdateWithoutSetsInput>
  }

  export type LocationUpdateWithoutSetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    longitude?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    guesses?: GuessUpdateManyWithoutLocationNestedInput
    images?: LocationImageUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateWithoutSetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    longitude?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    guesses?: GuessUncheckedUpdateManyWithoutLocationNestedInput
    images?: LocationImageUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type LocationSetUpsertWithoutLocationsInput = {
    update: XOR<LocationSetUpdateWithoutLocationsInput, LocationSetUncheckedUpdateWithoutLocationsInput>
    create: XOR<LocationSetCreateWithoutLocationsInput, LocationSetUncheckedCreateWithoutLocationsInput>
    where?: LocationSetWhereInput
  }

  export type LocationSetUpdateToOneWithWhereWithoutLocationsInput = {
    where?: LocationSetWhereInput
    data: XOR<LocationSetUpdateWithoutLocationsInput, LocationSetUncheckedUpdateWithoutLocationsInput>
  }

  export type LocationSetUpdateWithoutLocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameSessions?: GameSessionUpdateManyWithoutSetNestedInput
  }

  export type LocationSetUncheckedUpdateWithoutLocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameSessions?: GameSessionUncheckedUpdateManyWithoutSetNestedInput
  }

  export type LocationCreateWithoutImagesInput = {
    id?: string
    name: string
    description?: string | null
    latitude: Decimal | DecimalJsLike | number | string
    longitude: Decimal | DecimalJsLike | number | string
    difficulty?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    guesses?: GuessCreateNestedManyWithoutLocationInput
    sets?: LocationSetMappingCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateWithoutImagesInput = {
    id?: string
    name: string
    description?: string | null
    latitude: Decimal | DecimalJsLike | number | string
    longitude: Decimal | DecimalJsLike | number | string
    difficulty?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    guesses?: GuessUncheckedCreateNestedManyWithoutLocationInput
    sets?: LocationSetMappingUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationCreateOrConnectWithoutImagesInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutImagesInput, LocationUncheckedCreateWithoutImagesInput>
  }

  export type LocationUpsertWithoutImagesInput = {
    update: XOR<LocationUpdateWithoutImagesInput, LocationUncheckedUpdateWithoutImagesInput>
    create: XOR<LocationCreateWithoutImagesInput, LocationUncheckedCreateWithoutImagesInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutImagesInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutImagesInput, LocationUncheckedUpdateWithoutImagesInput>
  }

  export type LocationUpdateWithoutImagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    longitude?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    guesses?: GuessUpdateManyWithoutLocationNestedInput
    sets?: LocationSetMappingUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateWithoutImagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    longitude?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    guesses?: GuessUncheckedUpdateManyWithoutLocationNestedInput
    sets?: LocationSetMappingUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type LocationSetCreateWithoutGameSessionsInput = {
    id?: string
    name: string
    description?: string | null
    difficulty?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    locations?: LocationSetMappingCreateNestedManyWithoutSetInput
  }

  export type LocationSetUncheckedCreateWithoutGameSessionsInput = {
    id?: string
    name: string
    description?: string | null
    difficulty?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    locations?: LocationSetMappingUncheckedCreateNestedManyWithoutSetInput
  }

  export type LocationSetCreateOrConnectWithoutGameSessionsInput = {
    where: LocationSetWhereUniqueInput
    create: XOR<LocationSetCreateWithoutGameSessionsInput, LocationSetUncheckedCreateWithoutGameSessionsInput>
  }

  export type UserCreateWithoutGameSessionsInput = {
    id?: string
    email: string
    passwordHash: string
    displayName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    isVerified?: boolean
    role?: string
    preferences?: UserPreferenceCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutGameSessionsInput = {
    id?: string
    email: string
    passwordHash: string
    displayName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    isVerified?: boolean
    role?: string
    preferences?: UserPreferenceUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutGameSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGameSessionsInput, UserUncheckedCreateWithoutGameSessionsInput>
  }

  export type GuessCreateWithoutSessionInput = {
    id?: string
    guessedLat: Decimal | DecimalJsLike | number | string
    guessedLng: Decimal | DecimalJsLike | number | string
    distanceKm: Decimal | DecimalJsLike | number | string
    score: number
    timeTaken: number
    hintsUsed?: number
    createdAt?: Date | string
    location: LocationCreateNestedOneWithoutGuessesInput
  }

  export type GuessUncheckedCreateWithoutSessionInput = {
    id?: string
    locationId: string
    guessedLat: Decimal | DecimalJsLike | number | string
    guessedLng: Decimal | DecimalJsLike | number | string
    distanceKm: Decimal | DecimalJsLike | number | string
    score: number
    timeTaken: number
    hintsUsed?: number
    createdAt?: Date | string
  }

  export type GuessCreateOrConnectWithoutSessionInput = {
    where: GuessWhereUniqueInput
    create: XOR<GuessCreateWithoutSessionInput, GuessUncheckedCreateWithoutSessionInput>
  }

  export type GuessCreateManySessionInputEnvelope = {
    data: GuessCreateManySessionInput | GuessCreateManySessionInput[]
    skipDuplicates?: boolean
  }

  export type LocationSetUpsertWithoutGameSessionsInput = {
    update: XOR<LocationSetUpdateWithoutGameSessionsInput, LocationSetUncheckedUpdateWithoutGameSessionsInput>
    create: XOR<LocationSetCreateWithoutGameSessionsInput, LocationSetUncheckedCreateWithoutGameSessionsInput>
    where?: LocationSetWhereInput
  }

  export type LocationSetUpdateToOneWithWhereWithoutGameSessionsInput = {
    where?: LocationSetWhereInput
    data: XOR<LocationSetUpdateWithoutGameSessionsInput, LocationSetUncheckedUpdateWithoutGameSessionsInput>
  }

  export type LocationSetUpdateWithoutGameSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locations?: LocationSetMappingUpdateManyWithoutSetNestedInput
  }

  export type LocationSetUncheckedUpdateWithoutGameSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locations?: LocationSetMappingUncheckedUpdateManyWithoutSetNestedInput
  }

  export type UserUpsertWithoutGameSessionsInput = {
    update: XOR<UserUpdateWithoutGameSessionsInput, UserUncheckedUpdateWithoutGameSessionsInput>
    create: XOR<UserCreateWithoutGameSessionsInput, UserUncheckedCreateWithoutGameSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGameSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGameSessionsInput, UserUncheckedUpdateWithoutGameSessionsInput>
  }

  export type UserUpdateWithoutGameSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    preferences?: UserPreferenceUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutGameSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    preferences?: UserPreferenceUncheckedUpdateOneWithoutUserNestedInput
  }

  export type GuessUpsertWithWhereUniqueWithoutSessionInput = {
    where: GuessWhereUniqueInput
    update: XOR<GuessUpdateWithoutSessionInput, GuessUncheckedUpdateWithoutSessionInput>
    create: XOR<GuessCreateWithoutSessionInput, GuessUncheckedCreateWithoutSessionInput>
  }

  export type GuessUpdateWithWhereUniqueWithoutSessionInput = {
    where: GuessWhereUniqueInput
    data: XOR<GuessUpdateWithoutSessionInput, GuessUncheckedUpdateWithoutSessionInput>
  }

  export type GuessUpdateManyWithWhereWithoutSessionInput = {
    where: GuessScalarWhereInput
    data: XOR<GuessUpdateManyMutationInput, GuessUncheckedUpdateManyWithoutSessionInput>
  }

  export type LocationCreateWithoutGuessesInput = {
    id?: string
    name: string
    description?: string | null
    latitude: Decimal | DecimalJsLike | number | string
    longitude: Decimal | DecimalJsLike | number | string
    difficulty?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: LocationImageCreateNestedManyWithoutLocationInput
    sets?: LocationSetMappingCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateWithoutGuessesInput = {
    id?: string
    name: string
    description?: string | null
    latitude: Decimal | DecimalJsLike | number | string
    longitude: Decimal | DecimalJsLike | number | string
    difficulty?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: LocationImageUncheckedCreateNestedManyWithoutLocationInput
    sets?: LocationSetMappingUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationCreateOrConnectWithoutGuessesInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutGuessesInput, LocationUncheckedCreateWithoutGuessesInput>
  }

  export type GameSessionCreateWithoutGuessesInput = {
    id?: string
    startedAt?: Date | string
    completedAt?: Date | string | null
    difficulty?: string | null
    totalScore?: number
    status?: string
    set: LocationSetCreateNestedOneWithoutGameSessionsInput
    user: UserCreateNestedOneWithoutGameSessionsInput
  }

  export type GameSessionUncheckedCreateWithoutGuessesInput = {
    id?: string
    userId: string
    setId: string
    startedAt?: Date | string
    completedAt?: Date | string | null
    difficulty?: string | null
    totalScore?: number
    status?: string
  }

  export type GameSessionCreateOrConnectWithoutGuessesInput = {
    where: GameSessionWhereUniqueInput
    create: XOR<GameSessionCreateWithoutGuessesInput, GameSessionUncheckedCreateWithoutGuessesInput>
  }

  export type LocationUpsertWithoutGuessesInput = {
    update: XOR<LocationUpdateWithoutGuessesInput, LocationUncheckedUpdateWithoutGuessesInput>
    create: XOR<LocationCreateWithoutGuessesInput, LocationUncheckedCreateWithoutGuessesInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutGuessesInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutGuessesInput, LocationUncheckedUpdateWithoutGuessesInput>
  }

  export type LocationUpdateWithoutGuessesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    longitude?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: LocationImageUpdateManyWithoutLocationNestedInput
    sets?: LocationSetMappingUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateWithoutGuessesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    longitude?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: LocationImageUncheckedUpdateManyWithoutLocationNestedInput
    sets?: LocationSetMappingUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type GameSessionUpsertWithoutGuessesInput = {
    update: XOR<GameSessionUpdateWithoutGuessesInput, GameSessionUncheckedUpdateWithoutGuessesInput>
    create: XOR<GameSessionCreateWithoutGuessesInput, GameSessionUncheckedCreateWithoutGuessesInput>
    where?: GameSessionWhereInput
  }

  export type GameSessionUpdateToOneWithWhereWithoutGuessesInput = {
    where?: GameSessionWhereInput
    data: XOR<GameSessionUpdateWithoutGuessesInput, GameSessionUncheckedUpdateWithoutGuessesInput>
  }

  export type GameSessionUpdateWithoutGuessesInput = {
    id?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    totalScore?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    set?: LocationSetUpdateOneRequiredWithoutGameSessionsNestedInput
    user?: UserUpdateOneRequiredWithoutGameSessionsNestedInput
  }

  export type GameSessionUncheckedUpdateWithoutGuessesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    setId?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    totalScore?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type GameSessionCreateManyUserInput = {
    id?: string
    setId: string
    startedAt?: Date | string
    completedAt?: Date | string | null
    difficulty?: string | null
    totalScore?: number
    status?: string
  }

  export type GameSessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    totalScore?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    set?: LocationSetUpdateOneRequiredWithoutGameSessionsNestedInput
    guesses?: GuessUpdateManyWithoutSessionNestedInput
  }

  export type GameSessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    setId?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    totalScore?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    guesses?: GuessUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type GameSessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    setId?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    totalScore?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type GuessCreateManyLocationInput = {
    id?: string
    sessionId: string
    guessedLat: Decimal | DecimalJsLike | number | string
    guessedLng: Decimal | DecimalJsLike | number | string
    distanceKm: Decimal | DecimalJsLike | number | string
    score: number
    timeTaken: number
    hintsUsed?: number
    createdAt?: Date | string
  }

  export type LocationImageCreateManyLocationInput = {
    id?: string
    url: string
    isPrimary?: boolean
    width?: number | null
    height?: number | null
    format?: string | null
    createdAt?: Date | string
  }

  export type LocationSetMappingCreateManyLocationInput = {
    setId: string
    position: number
  }

  export type GuessUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    guessedLat?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    guessedLng?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    distanceKm?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    score?: IntFieldUpdateOperationsInput | number
    timeTaken?: IntFieldUpdateOperationsInput | number
    hintsUsed?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: GameSessionUpdateOneRequiredWithoutGuessesNestedInput
  }

  export type GuessUncheckedUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    guessedLat?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    guessedLng?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    distanceKm?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    score?: IntFieldUpdateOperationsInput | number
    timeTaken?: IntFieldUpdateOperationsInput | number
    hintsUsed?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GuessUncheckedUpdateManyWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    guessedLat?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    guessedLng?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    distanceKm?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    score?: IntFieldUpdateOperationsInput | number
    timeTaken?: IntFieldUpdateOperationsInput | number
    hintsUsed?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationImageUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationImageUncheckedUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationImageUncheckedUpdateManyWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationSetMappingUpdateWithoutLocationInput = {
    position?: IntFieldUpdateOperationsInput | number
    set?: LocationSetUpdateOneRequiredWithoutLocationsNestedInput
  }

  export type LocationSetMappingUncheckedUpdateWithoutLocationInput = {
    setId?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
  }

  export type LocationSetMappingUncheckedUpdateManyWithoutLocationInput = {
    setId?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
  }

  export type GameSessionCreateManySetInput = {
    id?: string
    userId: string
    startedAt?: Date | string
    completedAt?: Date | string | null
    difficulty?: string | null
    totalScore?: number
    status?: string
  }

  export type LocationSetMappingCreateManySetInput = {
    locationId: string
    position: number
  }

  export type GameSessionUpdateWithoutSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    totalScore?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutGameSessionsNestedInput
    guesses?: GuessUpdateManyWithoutSessionNestedInput
  }

  export type GameSessionUncheckedUpdateWithoutSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    totalScore?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    guesses?: GuessUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type GameSessionUncheckedUpdateManyWithoutSetInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    totalScore?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type LocationSetMappingUpdateWithoutSetInput = {
    position?: IntFieldUpdateOperationsInput | number
    location?: LocationUpdateOneRequiredWithoutSetsNestedInput
  }

  export type LocationSetMappingUncheckedUpdateWithoutSetInput = {
    locationId?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
  }

  export type LocationSetMappingUncheckedUpdateManyWithoutSetInput = {
    locationId?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
  }

  export type GuessCreateManySessionInput = {
    id?: string
    locationId: string
    guessedLat: Decimal | DecimalJsLike | number | string
    guessedLng: Decimal | DecimalJsLike | number | string
    distanceKm: Decimal | DecimalJsLike | number | string
    score: number
    timeTaken: number
    hintsUsed?: number
    createdAt?: Date | string
  }

  export type GuessUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    guessedLat?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    guessedLng?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    distanceKm?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    score?: IntFieldUpdateOperationsInput | number
    timeTaken?: IntFieldUpdateOperationsInput | number
    hintsUsed?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: LocationUpdateOneRequiredWithoutGuessesNestedInput
  }

  export type GuessUncheckedUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    guessedLat?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    guessedLng?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    distanceKm?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    score?: IntFieldUpdateOperationsInput | number
    timeTaken?: IntFieldUpdateOperationsInput | number
    hintsUsed?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GuessUncheckedUpdateManyWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    locationId?: StringFieldUpdateOperationsInput | string
    guessedLat?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    guessedLng?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    distanceKm?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    score?: IntFieldUpdateOperationsInput | number
    timeTaken?: IntFieldUpdateOperationsInput | number
    hintsUsed?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LocationCountOutputTypeDefaultArgs instead
     */
    export type LocationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LocationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LocationSetCountOutputTypeDefaultArgs instead
     */
    export type LocationSetCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LocationSetCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GameSessionCountOutputTypeDefaultArgs instead
     */
    export type GameSessionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GameSessionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserPreferenceDefaultArgs instead
     */
    export type UserPreferenceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserPreferenceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LocationDefaultArgs instead
     */
    export type LocationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LocationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LocationSetDefaultArgs instead
     */
    export type LocationSetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LocationSetDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LocationSetMappingDefaultArgs instead
     */
    export type LocationSetMappingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LocationSetMappingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LocationImageDefaultArgs instead
     */
    export type LocationImageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LocationImageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GameSessionDefaultArgs instead
     */
    export type GameSessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GameSessionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GuessDefaultArgs instead
     */
    export type GuessArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GuessDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}